---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: data-product-solution-deployer-0.0.1
  annotations:
spec:
  params:
    - name: namespace
      type: string
      description: Namespace for Cloud Pak Deployer deployment
      default: "cloud-pak-deployer"
    - name: storage-class
      type: string
      description: RWX storage class needed for cp4d
      default: "ocs-storagecluster-cephfs"
    - name: cloud-pak-deployer-storage-class
      type: string
      description: |
        Choose the defined storage class for the cloud pak deployer.
        {
          "options": [
            {"text": "auto-storage","value": "auto-storage", "default": "true"},
            {"text": "ocs-storage","value": "ocs-storage"},
            {"text": "nfs-storage","value": "nfs-storage"}
          ]
        }
      default: "auto-storage"
    - name: cloud-pak-deployer-storage-type
      type: string
      description: |
        Choose the defined storage type for the cloud pak deployer.
        {
          "options": [
            {"text": "auto","value": "auto", "default": "true"},
            {"text": "ocs","value": "ocs"},
            {"text": "nfs","value": "nfs"}
          ]
        }
      default: "auto"
    - name: cloud-pak-deployer-version
      type: string
      description: The Cloud Pak Deployer version you want to use for the deployment
      default: "v3.0.2"
    - name: ocp-client-version
      type: string
      description: Openshift client version
      default: "4.14"
    - name: cp4d-version
      type: string
      description: Cloud Pak for Data version
    - name: ibm-entitlement-key
      type: string
      description: The IBM entitlement key with permissions for pulling cp4d images
      default: "false"
    - name: cpd-confirm-destroy
      type: string
      description: Should the cloud pak deployer delete components that already exist in the cluster if you don't define them? True to delete components, False to not delete components.
      default: "True"
    - name: cpd-sequential-install
      type: string
      description: |
        Do you want to install components sequentially?
        {
          "options": [
            {"text": "No","value": "False", "default": "true"},
            {"text": "Yes","value": "True"}
          ]
        }
      default: "False"
    - name: cpd-use-fs-iam
      type: string
      description: |
        Do you want to enable FS IAM?
        {
          "options": [
            {"text": "Yes","value": "True", "default": "true"},
            {"text": "No","value": "False"}
          ]
        }
      default: "True"

    - name: scheduler-state
      type: string
      description: |
        Do you want to install scheduler?
        {
          "options": [
            {"text": "No","value": "removed", "default": "true"},
            {"text": "Yes","value": "installed"}
          ]
        }
      default: "removed"
    - name: analyticsengine-state
      type: string
      description: |
        Do you want to install analytics engine?
        {
          "options": [
            {"text": "No","value": "removed", "default": "true"},
            {"text": "Yes","value": "installed"}
          ]
        }
      default: "removed"
    - name: analyticsengine-size
      type: string
      description: |
        Choose the size of analytics engine installation. (only applied if component is installed)
        {
          "options": [
            {"text": "Small","value": "small", "default": "true"},
            {"text": "Medium","value": "medium"},
            {"text": "Large","value": "large"}
          ]
        }
      default: "small"
    - name: bigsql-state
      type: string
      description: |
        Do you want to install bigsql?
        {
          "options": [
            {"text": "No","value": "removed", "default": "true"},
            {"text": "Yes","value": "installed"}
          ]
        }
      default: "removed"
    - name: ca-state
      type: string
      description: |
        Do you want to install cognos analytics?
        {
          "options": [
            {"text": "No","value": "removed", "default": "true"},
            {"text": "Yes","value": "installed"}
          ]
        }
      default: "removed"
    - name: ca-size
      type: string
      description: |
        Choose size of cognos analytics installation. (only applied if component is installed)
        {
          "options": [
            {"text": "Small","value": "small", "default": "true"},
            {"text": "Medium","value": "medium"},
            {"text": "Large","value": "large"}
          ]
        }
      default: "small"
    - name: ca-instance
      type: string
      description: Choose the name of cognos analytics instance.
      default: "ca-instance"
    - name: dashboard-state
      type: string
      description: |
        Do you want to install cognos dashboards?
        {
          "options": [
            {"text": "No","value": "removed", "default": "true"},
            {"text": "Yes","value": "installed"}
          ]
        }
      default: "removed"
    - name: dataproduct-state
      type: string
      description: |
        Do you want to install Data Product Hub?
        {
          "options": [
            {"text": "No","value": "removed", "default": "true"},
            {"text": "Yes","value": "installed"}
          ]
        }
      default: "removed"
    - name: datagate-state
      type: string
      description: |
        Do you want to install datagate?
        {
          "options": [
            {"text": "No","value": "removed", "default": "true"},
            {"text": "Yes","value": "installed"}
          ]
        }
      default: "removed"
    - name: datastage-ent-state
      type: string
      description: |
        Do you want to install datastage enterprise?
        {
          "options": [
            {"text": "No","value": "removed", "default": "true"},
            {"text": "Yes","value": "installed"}
          ]
        }
      default: "removed"
    - name: datastage-ent-plus-state
      type: string
      description: |
        Do you want to install datastage enterprise plus?
        {
          "options": [
            {"text": "No","value": "removed", "default": "true"},
            {"text": "Yes","value": "installed"}
          ]
        }
      default: "removed"
    - name: db2-state
      type: string
      description: |
        Do you want to install db2?
        {
          "options": [
            {"text": "No","value": "removed", "default": "true"},
            {"text": "Yes","value": "installed"}
          ]
        }
      default: "removed"
    - name: db2-size
      type: string
      description: |
        Choose size of db2 installation. (only applied if component is installed)
        {
          "options": [
            {"text": "Small","value": "small", "default": "true"},
            {"text": "Medium","value": "medium"},
            {"text": "Large","value": "large"}
          ]
        }
      default: "small"
    - name: db2wh-state
      type: string
      description: |
        Do you want to install db2 warehouse?
        {
          "options": [
            {"text": "False","value": "removed", "default": "true"},
            {"text": "True","value": "installed"}
          ]
        }
      default: "removed"
    - name: dmc-state
      type: string
      description: |
        Do you want to install db2 data management console?
        {
          "options": [
            {"text": "No","value": "removed", "default": "true"},
            {"text": "Yes","value": "installed"}
          ]
        }
      default: "removed"
    - name: dmc-instance
      type: string
      description: Provide name of the data management console instance.
      default: "data-management-console"
    - name: dods-state
      type: string
      description: |
        Do you want to install decision optimization?
        {
          "options": [
            {"text": "No","value": "removed", "default": "true"},
            {"text": "Yes","value": "installed"}
          ]
        }
      default: "removed"
    - name: dods-size
      type: string
      description: |
        Choose size of decision optimization installation. (only applied if component is installed)
        {
          "options": [
            {"text": "Small","value": "small", "default": "true"},
            {"text": "Medium","value": "medium"},
            {"text": "Large","value": "large"}
          ]
        }
      default: "small"
    - name: dp-state
      type: string
      description: |
        Do you want to install data privacy?
        {
          "options": [
            {"text": "No","value": "removed", "default": "true"},
            {"text": "Yes","value": "installed"}
          ]
        }
      default: "removed"
    - name: dp-size
      type: string
      description: |
        Choose size of data privacy installation. (only applied if component is installed)
        {
          "options": [
            {"text": "Small","value": "small", "default": "true"},
            {"text": "Medium","value": "medium"},
            {"text": "Large","value": "large"}
          ]
        }
      default: "small"
    - name: dpra-state
      type: string
      description: |
        Do you want to install data privacy risk assessment?
        {
          "options": [
            {"text": "No","value": "removed", "default": "true"},
            {"text": "Yes","value": "installed"}
          ]
        }
      default: "removed"
    - name: factsheet-state
      type: string
      description: |
        Do you want to install ai factsheets?
        {
          "options": [
            {"text": "No","value": "removed", "default": "true"},
            {"text": "Yes","value": "installed"}
          ]
        }
      default: "removed"
    - name: factsheet-size
      type: string
      description: |
        Choose size of ai factsheets installation. (only applied if component is installed)
        {
          "options": [
            {"text": "Small","value": "small", "default": "true"},
            {"text": "Medium","value": "medium"},
            {"text": "Large","value": "large"}
          ]
        }
      default: "small"
    - name: dv-state
      type: string
      description: |
        Do you want to install data virtualization?
        {
          "options": [
            {"text": "No","value": "removed", "default": "true"},
            {"text": "Yes","value": "installed"}
          ]
        }
      default: "removed"
    - name: dv-size
      type: string
      description: |
        Choose size of data virtualization installation. (only applied if component is installed)
        {
          "options": [
            {"text": "Small","value": "small", "default": "true"},
            {"text": "Medium","value": "medium"},
            {"text": "Large","value": "large"}
          ]
        }
      default: "small"
    - name: dv-instance
      type: string
      description: Provide name of the data virtualization instance.
      default: "data-virtualization"
    - name: hadoop-state
      type: string
      description: |
        Do you want to install hadoop?
        {
          "options": [
            {"text": "No","value": "removed", "default": "true"},
            {"text": "Yes","value": "installed"}
          ]
        }
      default: "removed"
    - name: hadoop-size
      type: string
      description: |
        Choose size of hadoop installation. (only applied if component is installed)
        {
          "options": [
            {"text": "Small","value": "small", "default": "true"},
            {"text": "Medium","value": "medium"},
            {"text": "Large","value": "large"}
          ]
        }
      default: "small"
    - name: mantaflow-state
      type: string
      description: |
        Do you want to install MANTA Automated Lineage?
        {
          "options": [
            {"text": "No","value": "removed", "default": "true"},
            {"text": "Yes","value": "installed"}
          ]
        }
      default: "removed"
    - name: mantaflow-size
      type: string
      description: |
        Choose size of MANTA Automated Lineage installation. (only applied if component is installed)
        {
          "options": [
            {"text": "Small with min cpu","value": "small_mincpureq"},
            {"text": "Small","value": "small", "default": "true"},
            {"text": "Medium","value": "medium"},
            {"text": "Large","value": "large"}
          ]
        }
      default: "small"
    - name: match360-state
      type: string
      description: |
        Do you want to install match360?
        {
          "options": [
            {"text": "No","value": "removed", "default": "true"},
            {"text": "Yes","value": "installed"}
          ]
        }
      default: "removed"
    - name: match360-size
      type: string
      description: |
        Choose size of match360 installation. (only applied if component is installed)
        {
          "options": [
            {"text": "Small","value": "small", "default": "true"},
            {"text": "Medium","value": "medium"},
            {"text": "Large","value": "large"}
          ]
        }
      default: "small"
    - name: match360-wkc-enabled
      type: string
      description: |
        Do you want wkc enabled for match360 installation? (only applied if component is installed)
        {
          "options": [
            {"text": "Yes","value": "true", "default": "true"},
            {"text": "No","value": "false"}
          ]
        }
      default: "true"
    - name: openpages-state
      type: string
      description: |
        Do you want to install openpages?
        {
          "options": [
            {"text": "No","value": "removed", "default": "true"},
            {"text": "Yes","value": "installed"}
          ]
        }
      default: "removed"
    - name: rstudio-state
      type: string
      description: |
        Do you want to install rstudio?
        {
          "options": [
            {"text": "No","value": "removed", "default": "true"},
            {"text": "Yes","value": "installed"}
          ]
        }
      default: "removed"
    - name: rstudio-size
      type: string
      description: |
        Choose size of rstudio installation. (only applied if component is installed)
        {
          "options": [
            {"text": "Small","value": "small", "default": "true"},
            {"text": "Medium","value": "medium"},
            {"text": "Large","value": "large"}
          ]
        }
      default: "small"
    - name: spss-state
      type: string
      description: |
        Do you want to install spss modeler?
        {
          "options": [
            {"text": "No","value": "removed", "default": "true"},
            {"text": "Yes","value": "installed"}
          ]
        }
      default: "removed"
    - name: syntheticdata-state
      type: string
      description: |
        Do you want to install Synthetic Data Generator?
        {
          "options": [
            {"text": "No","value": "removed", "default": "true"},
            {"text": "Yes","value": "installed"}
          ]
        }
      default: "removed"
    - name: voice-gateway-state
      type: string
      description: |
        Do you want to install voice gateway?
        {
          "options": [
            {"text": "No","value": "removed", "default": "true"},
            {"text": "Yes","value": "installed"}
          ]
        }
      default: "removed"
    - name: voice-gateway-replicas
      type: string
      description: Provide number of voice gateway replicas.
      default: "1"
    - name: watsonx-assistant-state
      type: string
      description: |
        Do you want to install watsonx assistant.
        {
          "options": [
            {"text": "No","value": "removed", "default": "true"},
            {"text": "Yes","value": "installed"}
          ]
        }
      default: "removed"
    - name: watsonx-assistant-size
      type: string
      description: |
        Choose size of watsonx assistant installation. (only applied if component is installed)
        {
          "options": [
            {"text": "Small","value": "small", "default": "true"},
            {"text": "Medium","value": "medium"},
            {"text": "Large","value": "large"}
          ]
        }
      default: "small"
    - name: wa-instance
      type: string
      description: Choose the name of Watsonx Assistant instance.
      default: "wa-instance"
    - name: watson-discovery-state
      type: string
      description: |
        Do you want to install watson discovery?
        {
          "options": [
            {"text": "No","value": "removed", "default": "true"},
            {"text": "Yes","value": "installed"}
          ]
        }
      default: "removed"
    - name: watson-discovery-instance
      type: string
      description: Choose the name of Watson Discovery instance.
      default: "wd-instance"
    - name: watson-openscale-state
      type: string
      description: |
        Do you want to install watson openscale?
        {
          "options": [
            {"text": "No","value": "removed", "default": "true"},
            {"text": "Yes","value": "installed"}
          ]
        }
      default: "removed"
    - name: watson-openscale-size
      type: string
      description: |
        Choose size of watson openscale installation. (only applied if component is installed)
        {
          "options": [
            {"text": "Small","value": "small", "default": "true"},
            {"text": "Medium","value": "medium"},
            {"text": "Large","value": "large"}
          ]
        }
      default: "small"
    - name: watson-speech-state
      type: string
      description: |
        Do you want to install watson speech?
        {
          "options": [
            {"text": "No","value": "removed", "default": "true"},
            {"text": "Yes","value": "installed"}
          ]
        }
      default: "removed"
    - name: watson-speech-stt-size
      type: string
      description: |
        Choose size of watson speech to text. (only applied if component is installed)
        {
          "options": [
            {"text": "Extra Small","value": "xsmall", "default": "true"},
            {"text": "Small","value": "small"},
            {"text": "Medium","value": "medium"},
            {"text": "Large","value": "large"}
          ]
        }
      default: "xsmall"
    - name: watson-speech-tts-size
      type: string
      description: |
        Choose size of watson text to speech. (only applied if component is installed)
        {
          "options": [
            {"text": "Extra Small","value": "xsmall", "default": "true"},
            {"text": "Small","value": "small"},
            {"text": "Medium","value": "medium"},
            {"text": "Large","value": "large"}
          ]
        }
      default: "xsmall"
    - name: install-openshift-ai
      type: string
      description: |
        Install the OpenShift AI operator and configure it for CP4D.
        {
          "options": [
            {"text": "No","value": "False"},
            {"text": "Yes","value": "True", "default": "true"}
          ]
        }
      default: "True"
    - name: configure-gpu
      type: string
      description: |
        Install the NVIDIA operator and Node Feature Discovery for GPU nodes.
        {
          "options": [
            {"text": "No","value": "False"},
            {"text": "Yes","value": "True", "default": "true"}
          ]
        }
      default: "True"
    - name: watsonx-ai-state
      type: string
      description: |
        Do you want to install watsonx.ai?
        {
          "options": [
            {"text": "No","value": "removed", "default": "true"},
            {"text": "Yes","value": "installed"}
          ]
        }
      default: "removed"
    - name: watsonx-ai-tuning-disabled
      type: string
      description: |
        Do you want to disable the watsonx.ai tuning studio installation
        {
          "options": [
            {"text": "No","value": "false"},
            {"text": "Yes","value": "true", "default": "true"}
          ]
        }
      default: "true"
    - name: llm-google-flan-t5-xxl-state
      type: string
      description: |
        Do you want to install google-flan-t5-xxl llm?
        {
          "options": [
            {"text": "No","value": "removed", "default": "true"},
            {"text": "Yes","value": "installed"}
          ]
        }
      default: "removed"
    - name: llm-google-flan-ul2-state
      type: string
      description: |
        Do you want to install google-flan-ul2 llm?
        {
          "options": [
            {"text": "No","value": "removed", "default": "true"},
            {"text": "Yes","value": "installed"}
          ]
        }
      default: "removed"
    - name: llm-eleutherai-gpt-neox-20b-state
      type: string
      description: |
        Do you want to install eleutherai-gpt-neox-20b llm?
        {
          "options": [
            {"text": "No","value": "removed", "default": "true"},
            {"text": "Yes","value": "installed"}
          ]
        }
      default: "removed"
    - name: llm-granite-13b-chat-v1-state
      type: string
      description: |
        Do you want to install ibm-granite-13b-chat-v1 llm?
        {
          "options": [
            {"text": "No","value": "removed", "default": "true"},
            {"text": "Yes","value": "installed"}
          ]
        }
      default: "removed"
    - name: llm-granite-13b-chat-v2-state
      type: string
      description: |
        Do you want to install ibm-granite-13b-chat-v2 llm?
        {
          "options": [
            {"text": "No","value": "removed", "default": "true"},
            {"text": "Yes","value": "installed"}
          ]
        }
      default: "removed"
    - name: llm-ibm-granite-13b-instruct-v1-state
      type: string
      description: |
        Do you want to install ibm-granite-13b-instruct-v1 llm?
        {
          "options": [
            {"text": "No","value": "removed", "default": "true"},
            {"text": "Yes","value": "installed"}
          ]
        }
      default: "removed"
    - name: llm-ibm-granite-13b-instruct-v2-state
      type: string
      description: |
        Do you want to install ibm-granite-13b-instruct-v2 llm?
        {
          "options": [
            {"text": "No","value": "removed", "default": "true"},
            {"text": "Yes","value": "installed"}
          ]
        }
      default: "removed"
    - name: llm-meta-llama-llama-2-70b-chat-state
      type: string
      description: |
        Do you want to install meta-llama-llama-2-70b-chat llm?
        {
          "options": [
            {"text": "No","value": "removed", "default": "true"},
            {"text": "Yes","value": "installed"}
          ]
        }
      default: "removed"
    - name: llm-mncai-llama-2-13b-dpo-v7-state
      type: string
      description: |
        Do you want to install mncai-llama-2-13b-dpo-v7 llm?
        {
          "options": [
            {"text": "No","value": "removed", "default": "true"},
            {"text": "Yes","value": "installed"}
          ]
        }
      default: "removed"
    - name: llm-ibm-mistralai-merlinite-7b-state
      type: string
      description: |
        Do you want to install ibm-mistralai-merlinite-7b llm?
        {
          "options": [
            {"text": "No","value": "removed", "default": "true"},
            {"text": "Yes","value": "installed"}
          ]
        }
      default: "removed"
    - name: llm-ibm-mpt-7b-instruct2-state
      type: string
      description: |
        Do you want to install ibm-mpt-7b-instruct2 llm?
        {
          "options": [
            {"text": "No","value": "removed", "default": "true"},
            {"text": "Yes","value": "installed"}
          ]
        }
      default: "removed"
    - name: llm-mistralai-mixtral-8x7b-instruct-v01-state
      type: string
      description: |
        Do you want to install mistralai-mixtral-8x7b-instruct-v01 llm?
        {
          "options": [
            {"text": "No","value": "removed", "default": "true"},
            {"text": "Yes","value": "installed"}
          ]
        }
      default: "removed"
    - name: llm-allam-1-13b-instruct-state
      type: string
      description: |
        Do you want to install allam-1-13b-instruct?
        {
          "options": [
            {"text": "No","value": "removed", "default": "true"},
            {"text": "Yes","value": "installed"}
          ]
        }
      default: "removed"
    - name: llm-codellama-codellama-34b-instruct-hf-state
      type: string
      description: |
        Do you want to install codellama-codellama-34b-instruct-hf?
        {
          "options": [
            {"text": "No","value": "removed", "default": "true"},
            {"text": "Yes","value": "installed"}
          ]
        }
      default: "removed"
    - name: llm-elyza-japanese-llama-2-7b-instruct-state
      type: string
      description: |
        Do you want to install elyza-japanese-llama-2-7b-instruct?
        {
          "options": [
            {"text": "No","value": "removed", "default": "true"},
            {"text": "Yes","value": "installed"}
          ]
        }
      default: "removed"
    - name: llm-ibm-mistralai-mixtral-8x7b-instruct-v01-q-state
      type: string
      description: |
        Do you want to install ibm-mistralai-mixtral-8x7b-instruct-v01-q?
        {
          "options": [
            {"text": "No","value": "removed", "default": "true"},
            {"text": "Yes","value": "installed"}
          ]
        }
      default: "removed"
    - name: llm-bigscience-mt0-xxl-state
      type: string
      description: |
        Do you want to install bigscience-mt0-xxl llm?
        {
          "options": [
            {"text": "No","value": "removed", "default": "true"},
            {"text": "Yes","value": "installed"}
          ]
        }
      default: "removed"
    - name: llm-bigcode-starcoder-state
      type: string
      description: |
        Do you want to install bigcode-starcoder llm?
        {
          "options": [
            {"text": "No","value": "removed", "default": "true"},
            {"text": "Yes","value": "installed"}
          ]
        }
      default: "removed"
    - name: llm-ibm-granite-8b-japanese-state
      type: string
      description: |
        Do you want to install ibm-granite-8b-japanese llm?
        {
          "options": [
            {"text": "No","value": "removed", "default": "true"},
            {"text": "Yes","value": "installed"}
          ]
        }
      default: "removed"
    - name: llm-ibm-granite-20b-multilingual-state
      type: string
      description: |
        Do you want to install ibm-granite-20b-multilingual llm?
        {
          "options": [
            {"text": "No","value": "removed", "default": "true"},
            {"text": "Yes","value": "installed"}
          ]
        }
      default: "removed"
    - name: llm-core42-jais-13b-chat-state
      type: string
      description: |
        Do you want to install core42-jais-13b-chat llm?
        {
          "options": [
            {"text": "No","value": "removed", "default": "true"},
            {"text": "Yes","value": "installed"}
          ]
        }
      default: "removed"
    - name: llm-meta-llama-llama-2-13b-chat-state
      type: string
      description: |
        Do you want to install meta-llama-llama-2-13b-chat llm?
        {
          "options": [
            {"text": "No","value": "removed", "default": "true"},
            {"text": "Yes","value": "installed"}
          ]
        }
      default: "removed"
    - name: llm-meta-llama-llama3-8b-instruct-state
      type: string
      description: |
        Do you want to install meta-llama-llama3-8b-instruct llm?
        {
          "options": [
            {"text": "No","value": "removed", "default": "true"},
            {"text": "Yes","value": "installed"}
          ]
        }
      default: "removed"
    - name: llm-google-flan-t5-xl-state
      type: string
      description: |
        Do you want to install google-flan-t5-xl llm?
        {
          "options": [
            {"text": "No","value": "removed", "default": "true"},
            {"text": "Yes","value": "installed"}
          ]
        }
      default: "removed"
    - name: watsonx-data-state
      type: string
      description: |
        Do you want to install watsonx.data?
        {
          "options": [
            {"text": "No","value": "removed", "default": "true"},
            {"text": "Yes","value": "installed"}
          ]
        }
      default: "removed"
    - name: wkc-state
      type: string
      description: |
        Do you want to install IBM Knowledge Catalog?
        {
          "options": [
            {"text": "No","value": "removed", "default": "true"},
            {"text": "Yes","value": "installed"}
          ]
        }
      default: "removed"
    - name: wkc-size
      type: string
      description: |
        Choose size of watson knowledge catalogue. (only applied if component is installed)
        {
          "options": [
            {"text": "Small","value": "small", "default": "true"},
            {"text": "Medium","value": "medium"},
            {"text": "Large","value": "large"}
          ]
        }
      default: "small"
    - name: wkc-options-knowledge-graph
      type: string
      description: |
        Do you want to enable knowledge graph for wkc? (only applied if wkc is installed)
        {
          "options": [
            {"text": "No","value": "False", "default": "true"},
            {"text": "Yes","value": "True"}
          ]
        }
      default: "False"
    - name: wkc-options-enable-data-quality
      type: string
      description: |
        Do you want to enable data quality for wkc?
        {
          "options": [
            {"text": "No","value": "False", "default": "true"},
            {"text": "Yes","value": "True"}
          ]
        }
      default: "False"
    - name: ikc-premium-state
      type: string
      description: |
        Do you want to install ikc-premium (IBM Knowledge Catalog Premium?
        {
          "options": [
            {"text": "No","value": "removed", "default": "true"},
            {"text": "Yes","value": "installed"}
          ]
        }
      default: "removed"
    - name: ikc-premium-size
      type: string
      description: |
        Choose size of ikc-premium. (only applied if component is installed)
        {
          "options": [
            {"text": "Small","value": "small", "default": "true"},
            {"text": "Medium","value": "medium"},
            {"text": "Large","value": "large"}
          ]
        }
      default: "small"
    - name: ikc-premium-options-knowledge-graph
      type: string
      description: |
        Do you want to enable knowledge graph for ikc-premium? (only applied if ikc-premium is installed)
        {
          "options": [
            {"text": "No","value": "False", "default": "true"},
            {"text": "Yes","value": "True"}
          ]
        }
      default: "False"
    - name: ikc-premium-options-enable-data-quality
      type: string
      description: |
        Do you want to enable data quality for ikc-premium?
        {
          "options": [
            {"text": "No","value": "False", "default": "true"},
            {"text": "Yes","value": "True"}
          ]
        }
      default: "False"
    - name: ikc-standard-state
      type: string
      description: |
        Do you want to install ikc-standard (IBM Knowledge Catalog Standard?
        {
          "options": [
            {"text": "No","value": "removed", "default": "true"},
            {"text": "Yes","value": "installed"}
          ]
        }
      default: "removed"
    - name: ikc-standard-size
      type: string
      description: |
        Choose size of ikc-standard. (only applied if component is installed)
        {
          "options": [
            {"text": "Small","value": "small", "default": "true"},
            {"text": "Medium","value": "medium"},
            {"text": "Large","value": "large"}
          ]
        }
      default: "small"
    - name: ikc-standard-options-knowledge-graph
      type: string
      description: |
        Do you want to enable knowledge graph for ikc-standard? (only applied if ikc-standard is installed)
        {
          "options": [
            {"text": "No","value": "False", "default": "true"},
            {"text": "Yes","value": "True"}
          ]
        }
      default: "False"
    - name: ikc-standard-options-enable-data-quality
      type: string
      description: |
        Do you want to enable data quality for ikc-standard?
        {
          "options": [
            {"text": "No","value": "False", "default": "true"},
            {"text": "Yes","value": "True"}
          ]
        }
      default: "False"

    - name: watsonx-orchestrate-state
      type: string
      description: |
        Do you want to install watsonx orchestrate?
        {
          "options": [
            {"text": "No","value": "removed", "default": "true"},
            {"text": "Yes","value": "installed"}
          ]
        }
      default: "removed"
    - name: planning-analytics-state
      type: string
      description: |
        Do you want to install planning analytics?
        {
          "options": [
            {"text": "No","value": "removed", "default": "true"},
            {"text": "Yes","value": "installed"}
          ]
        }
      default: "removed"
    - name: replication-state
      type: string
      description: |
        Do you want to install data replication?
        {
          "options": [
            {"text": "No","value": "removed", "default": "true"},
            {"text": "Yes","value": "installed"}
          ]
        }
      default: "removed"
    - name: replication-size
      type: string
      description: |
        Choose size of data replication. (only applied if component is installed)
        {
          "options": [
            {"text": "Small","value": "small", "default": "true"},
            {"text": "Medium","value": "medium"},
            {"text": "Large","value": "large"}
          ]
        }
      default: "small"
    - name: watsonx-governance-state
      type: string
      description: |
        Do you want to install watsonx governance?
        {
          "options": [
            {"text": "No","value": "removed", "default": "true"},
            {"text": "Yes","value": "installed"}
          ]
        }
      default: "removed"
    - name: watsonx-gov-installType
      type: string
      description: |
        Specify which watsonx.governance entitlement you purchased.
        {
          "options": [
            {"text": "Both Model Management and Risk & Compliance Foundation entitlements","value": "all", "default": "true"},
            {"text": "Just Model Management entitlement","value": "mm"},
            {"text": "Just Risk and Compliance Foundation entitlement","value": "rcf"}
          ]
        }
      default: "all"
    - name: watsonx-gov-enableFactsheet
      type: string
      description: |
        Do you want Factsheets enabled for watsonx governance installation? (only applied if component is installed)
        {
          "options": [
            {"text": "Yes","value": "true", "default": "true"},
            {"text": "No","value": "false"}
          ]
        }
      default: "true"
    - name: watsonx-gov-enableOpenpages
      type: string
      description: |
        Do you want OpenPages enabled for watsonx governance installation? (only applied if component is installed)
        {
          "options": [
            {"text": "Yes","value": "true", "default": "true"},
            {"text": "No","value": "false"}
          ]
        }
      default: "true"
    - name: watsonx-gov-enableOpenscale
      type: string
      description: |
        Do you want OpenScale enabled for watsonx governance installation? (only applied if component is installed)
        {
          "options": [
            {"text": "Yes","value": "true", "default": "true"},
            {"text": "No","value": "false"}
          ]
        }
      default: "true"
    - name: wml-state
      type: string
      description: |
        Do you want to install watson machine learning?
        {
          "options": [
            {"text": "No","value": "removed", "default": "true"},
            {"text": "Yes","value": "installed"}
          ]
        }
      default: "removed"
    - name: wml-size
      type: string
      description: |
        Choose size of watson machine learning. (only applied if component is installed)
        {
          "options": [
            {"text": "Small","value": "small", "default": "true"},
            {"text": "Medium","value": "medium"},
            {"text": "Large","value": "large"}
          ]
        }
      default: "small"
    - name: wml-accelerator-state
      type: string
      description: |
        Do you want to install watson machine learning accelerator?
        {
          "options": [
            {"text": "No","value": "removed", "default": "true"},
            {"text": "Yes","value": "installed"}
          ]
        }
      default: "removed"
    - name: wml-accelerator-size
      type: string
      description: |
        Choose size of watson machine learning accelerator. (only applied if component is installed)
        {
          "options": [
            {"text": "Small","value": "small", "default": "true"},
            {"text": "Medium","value": "medium"},
            {"text": "Large","value": "large"}
          ]
        }
      default: "small"
    - name: wml-accelerator-replicas
      type: string
      description: Provide number of wml accelerator replicas.
      default: "1"
    - name: ws-state
      type: string
      description: |
        Do you want to install watson studio?
        {
          "options": [
            {"text": "No","value": "removed", "default": "true"},
            {"text": "Yes","value": "installed"}
          ]
        }
      default: "removed"
    # IMPORTANT: WS PIPELINES CANNOT BE INSTALLED IN A CLUSTER THAT ALSO HAS OPENSHIFT PIPELINES.
    # BECAUSE OPENSHIFT PIPELINES IS NECESSARY FOR DEPLOYER, WS PIPELINES CANNOT BE INSTALLED
    # - name: ws-pipelines-state
    #   type: string
    #   description: |
    #     Do you want to install watson studio pipelines?
    #     {
    #       "options": [
    #         {"text": "No","value": "removed", "default": "true"},
    #         {"text": "Yes","value": "installed" }
    #       ]
    #     }
    #   default: "removed"
    - name: ws-runtimes-state
      type: string
      description: |
        Do you want to install watson studio runtimes?
        {
          "options": [
            {"text": "No","value": "removed", "default": "true"},
            {"text": "Yes","value": "installed" }
          ]
        }
      default: "removed"
    ### gas - params for additional tasks
    - name: cp4i-namespace
      default: integration
      description: CP4I installaton namespace
      type: string    
    - default: openldap
      name: openldap-namespace
      description: openldap installaton namespace
      type: string
  finally:
    - name: update-configmap-failure
      when:
        - input: $(tasks.run-the-deployer.status)
          operator: notin
          values: ["Succeeded"]
      taskRef:
        kind: Task
        name: ibm-pak
      params:
        - name: SCRIPT
          value: |
            oc patch configmap/pipeline-output -p '{"data":{"Status":"Pipeline run failed. See Pipeline run for more details and consider running the pipeline again."}}'
    - name: update-configmap-success-no-iam
      when:
        - input: $(tasks.run-the-deployer.status)
          operator: in
          values: ["Succeeded"]
        - input: $(params.cpd-use-fs-iam)
          operator: notin
          values: ["True"]
      taskRef:
        kind: Task
        name: ibm-pak
      params:
        - name: SCRIPT
          value: |
            cpd_route=$(oc get route cpd -n cpd --template='{{ .spec.host }}')
            echo "Console Route: $cpd_route"
            initial_admin_password=$(oc get secret admin-user-details -n cpd -o jsonpath='{.data.initial_admin_password}' | base64 -d)
            echo "Username: admin"
            echo "Password: $initial_admin_password"

            echo "Minio (object store) parameters"
            oc create route edge ibm-lh-lakehouse-minio-console --service=ibm-lh-lakehouse-minio-svc --port=9001 -n cpd
            minio_console=$(oc get route ibm-lh-lakehouse-minio-console -n cpd --template='{{ .spec.host }}')
            
            echo "Create Minio S3 route for portal file upload"
            oc create route edge ibm-lh-lakehouse-minio-s3 --service ibm-lh-lakehouse-minio-svc --port 9000 -n cpd
            export S3_ENDPOINT=$(oc get route ibm-lh-lakehouse-minio-s3 -n cpd -o jsonpath="{.spec.host}")

            LH_S3_ACCESS_KEY=$(oc get secret ibm-lh-minio-secret -n cpd -o jsonpath='{.data.LH_S3_ACCESS_KEY}' | base64 -d)
            LH_S3_SECRET_KEY=$(oc get secret ibm-lh-minio-secret -n cpd -o jsonpath='{.data.LH_S3_SECRET_KEY}' | base64 -d)
            echo "Endpoint: ibm-lh-lakehouse-minio-svc.cpd.svc.cluster.local:9000"
            echo "LH_S3_ACCESS_KEY: $LH_S3_ACCESS_KEY"
            echo "LH_S3_SECRET_KEY: $LH_S3_SECRET_KEY"
            echo "Minio console: https://$minio_console"
            echo "Minio s3: https://$S3_ENDPOINT"

            oc patch configmap/pipeline-output -p "{\"data\":{\"Status\":\"Pipeline run Successful\",\"CP4D-Console-Route\":\"${cpd_route}\",\"CP4D-Initial-Admin-Username\":\"admin\",\"CP4D-Initial-Admin-Password\":\"${initial_admin_password}\"}}"
            
    - name: update-configmap-success-iam
      when:
        - input: $(tasks.run-the-deployer.status)
          operator: in
          values: ["Succeeded"]
        - input: $(params.cpd-use-fs-iam)
          operator: in
          values: ["True"]
      taskRef:
        kind: Task
        name: ibm-pak
      params:
        - name: SCRIPT
          value: |
            initial_admin_password=$(oc extract --namespace cpd secret/platform-auth-idp-credentials --keys=admin_password --to=-)
            cpd_route=$(oc get route cpd -n cpd --template='{{ .spec.host }}')
            echo "Console Route: $cpd_route"
            echo "Username: cpadmin"
            echo "Password: $initial_admin_password"

            echo "Minio (object store) parameters"
            oc create route edge ibm-lh-lakehouse-minio-console --service=ibm-lh-lakehouse-minio-svc --port=9001 -n cpd
            minio_console=$(oc get route ibm-lh-lakehouse-minio-console -n cpd --template='{{ .spec.host }}')

            echo "Create Minio S3 route for portal file upload"
            oc create route edge ibm-lh-lakehouse-minio-s3 --service ibm-lh-lakehouse-minio-svc --port 9000 -n cpd
            export S3_ENDPOINT=$(oc get route ibm-lh-lakehouse-minio-s3 -n cpd -o jsonpath="{.spec.host}")

            LH_S3_ACCESS_KEY=$(oc get secret ibm-lh-minio-secret -n cpd -o jsonpath='{.data.LH_S3_ACCESS_KEY}' | base64 -d)
            LH_S3_SECRET_KEY=$(oc get secret ibm-lh-minio-secret -n cpd -o jsonpath='{.data.LH_S3_SECRET_KEY}' | base64 -d)
            echo "Endpoint: ibm-lh-lakehouse-minio-svc.cpd.svc.cluster.local:9000"
            echo "LH_S3_ACCESS_KEY: $LH_S3_ACCESS_KEY"
            echo "LH_S3_SECRET_KEY: $LH_S3_SECRET_KEY"
            echo "Minio console: https://$minio_console"
            echo "Minio s3: https://$S3_ENDPOINT"

            # openldap
            export LDAP_PASSWD=$(oc extract --namespace openldap secret/openldap --keys=adminpassword --to=-)

            # cp4i
            
            export APIC_ENDPOINT=$(oc get route -l app.kubernetes.io/name=platform-api-endpoint -n integration -o jsonpath="{.items[].spec.host}")
            echo "APIC_ENDPOINT: $APIC_ENDPOINT"
            
            APIC_SECRET=$(oc get  -n integration managementcluster api-management-mgmt -o jsonpath="{.status.toolkitCredentialSecret}")
            export APIC_CLIENT_ID=$(oc extract --namespace integration secret/$APIC_SECRET --keys=credential.json --to=- | jq -r .id)
            echo "APIC_CLIENT_ID: $APIC_CLIENT_ID"
            export APIC_CLIENT_SECRET=$(oc extract --namespace integration secret/$APIC_SECRET --keys=credential.json --to=- | jq -r .secret)
            echo "APIC_CLIENT_SECRET: $APIC_CLIENT_SECRET"
            export APIC_PWD=$(oc extract --namespace integration secret/api-management-mgmt-admin-pass --keys=password --to=-)
            echo "APIC_PWD: $APIC_PWD"

            ### apic data app creds
            data_app_client_id=$(oc extract --namespace integration secret/data-app-keys --keys=client_id --to=-)
            data_app_client_secret=$(oc extract --namespace integration secret/data-app-keys --keys=client_secret --to=-)
            echo "data_app_client_id: $data_app_client_id"
            echo "data_app_client_secret: $data_app_client_secret"

            ### stepzen
            stepzen_adminkey=$(oc extract --namespace stepzen secret/stepzen-keys --keys=admin_key --to=-)
            stepzen_apikey=$(oc extract --namespace stepzen secret/stepzen-keys --keys=api_key --to=-)
            echo "stepzen_adminkey: $stepzen_adminkey"
            echo "stepzen_apikey: $stepzen_apikey"

            ### create config map vars-for-python
            #TODO check if secret exists
            echo "Creating vars-for-python"
            oc delete configmap -n cpd vars-for-python
            oc create configmap -n cpd vars-for-python \
              --from-literal=cp4d_endpoint=$cpd_route \
              --from-literal=cpadmin_password=$initial_admin_password \
              --from-literal=COS_ENDPOINT=ibm-lh-lakehouse-minio-svc.cpd.svc.cluster.local:9000 \
              --from-literal=S3_ENDPOINT=$S3_ENDPOINT \
              --from-literal=COS_ACCESS_KEY=$LH_S3_ACCESS_KEY \
              --from-literal=COS_SECRET_KEY=$LH_S3_SECRET_KEY \
              --from-literal=apic_endpoint=$APIC_ENDPOINT \
              --from-literal=apic_user=admin \
              --from-literal=apic_password=$APIC_PWD \
              --from-literal=apic_client_id=$APIC_CLIENT_ID \
              --from-literal=apic_client_secret=$APIC_CLIENT_SECRET \
              --from-literal=data_app_client_id=$data_app_client_id \
              --from-literal=data_app_client_secret=$data_app_client_secret \
              --from-literal=stepzen_adminkey=$stepzen_adminkey \
              --from-literal=stepzen_apikey=$stepzen_apikey               

            oc patch configmap/pipeline-output -p "{\"data\":{\"Status\":\"Pipeline run Successful\",\"CP4D-Console-Route\":\"${cpd_route}\",\"CP4D-Initial-Admin-Username\":\"cpadmin\",\"CP4D-Initial-Admin-Password\":\"${initial_admin_password}\"}}"
  tasks:
    - name: add-namespace
      retries: 3
      taskRef:
        kind: Task
        name: ibm-pak
      params:
        - name: SCRIPT
          value: |
            oc apply -f - <<EOF 
            apiVersion: v1
            kind: Namespace
            metadata:
              creationTimestamp: null
              name: $(params.namespace)
            EOF
    - name: add-sa
      retries: 3
      taskRef:
        kind: Task
        name: ibm-pak
      runAfter:
        - add-namespace
      params:
        - name: SCRIPT
          value: |
            oc apply -f - <<EOF 
            apiVersion: v1
            kind: ServiceAccount
            metadata:
              name: cloud-pak-deployer-sa
              namespace: $(params.namespace)
            EOF
    - name: add-sa-permissions
      retries: 3
      taskRef:
        kind: Task
        name: ibm-pak
      runAfter:
        - add-sa
      params:
        - name: SCRIPT
          value: |
            oc apply -f - <<EOF 
            apiVersion: rbac.authorization.k8s.io/v1
            kind: RoleBinding
            metadata:
              name: system:openshift:scc:privileged
              namespace: $(params.namespace)
            roleRef:
              apiGroup: rbac.authorization.k8s.io
              kind: ClusterRole
              name: system:openshift:scc:privileged
            subjects:
            - kind: ServiceAccount
              name: cloud-pak-deployer-sa
              namespace: $(params.namespace)
            EOF
    - name: bind-sa-permissions
      retries: 3
      taskRef:
        kind: Task
        name: ibm-pak
      runAfter:
        - add-sa-permissions
      params:
        - name: SCRIPT
          value: |
            oc apply -f - <<EOF 
            apiVersion: rbac.authorization.k8s.io/v1
            kind: ClusterRoleBinding
            metadata:
              name: cloud-pak-deployer-cluster-admin
            roleRef:
              apiGroup: rbac.authorization.k8s.io
              kind: ClusterRole
              name: cluster-admin
            subjects:
            - kind: ServiceAccount
              name: cloud-pak-deployer-sa
              namespace: $(params.namespace)
            EOF
    - name: create-pvc
      retries: 3
      taskRef:
        kind: Task
        name: ibm-pak
      runAfter:
        - bind-sa-permissions
      params:
        - name: SCRIPT
          value: |
            oc apply -f - <<EOF
            apiVersion: v1 
            kind: PersistentVolumeClaim
            metadata:
              name: cloud-pak-deployer-status
              namespace: $(params.namespace)
            spec:
              accessModes:
              - ReadWriteMany
              storageClassName: $(params.storage-class)
              resources:
                requests:
                  storage: 10Gi
            EOF
    - name: get-tz-ibm-entitlement-key
      retries: 3
      params:
        - name: KEY_ID
          value: 968d7819-f2c5-7b67-c420-3c6bfd51521e
        - name: SECRETS_MANAGER_ENDPOINT_URL
          value: >-
            https://afa20521-cd75-4864-843f-e59fd0ffd49d.us-south.secrets-manager.appdomain.cloud
      taskRef:
        kind: Task
        name: ibmcloud-secrets-manager-get
      runAfter:
        - create-pvc
    - name: assign-ibm-entitlement-key
      retries: 3
      params:
        - name: ibm-entitlement-key
          value: "$(params.ibm-entitlement-key)"
        - name: tz-ibm-entitlement-key
          value: "$(tasks.get-tz-ibm-entitlement-key.results.secret-value)"
      taskSpec:
        params:
          - name: ibm-entitlement-key
            type: string
            description: user provided ibm-entitlement-key
          - name: tz-ibm-entitlement-key
            type: string
            description: user provided ibm-entitlement-key
        results:
          - name: key
            description: The key to use for the secret
            type: string
        steps:
          - image: podman
            securityContext:
              capabilities:
                add: ["SETFCAP"]
            script: |
              if [ "$(params.ibm-entitlement-key)" != "false" ]; then
                echo "user provided key - $(params.ibm-entitlement-key)"
                printf "$(params.ibm-entitlement-key)" | tee $(results.key.path)

                echo "testing key for cp.icr.io"
                podman login cp.icr.io --username cp --password $(params.ibm-entitlement-key)
              else
                echo "techzone key - $(params.tz-ibm-entitlement-key)"
                echo "testing key for cp.icr.io"
                podman login cp.icr.io --username cp --password $(params.tz-ibm-entitlement-key)
                printf "$(params.tz-ibm-entitlement-key)" | tee $(results.key.path)
              fi
      runAfter:
        - get-tz-ibm-entitlement-key
    - name: create-entitlement-key-secret
      taskRef:
        kind: Task
        name: ibm-pak
      runAfter:
        - assign-ibm-entitlement-key
      retries: 3
      params:
        - name: SCRIPT
          value: |
            oc apply -f - <<EOF
            apiVersion: v1
            kind: Secret
            metadata:
              name: cloud-pak-entitlement-key
              namespace: $(params.namespace)
            type: Opaque
            stringData:
              cp-entitlement-key: |
                $(tasks.assign-ibm-entitlement-key.results.key)
            EOF
    - name: configure-cloud-paks-services
      runAfter:
        - create-entitlement-key-secret
      retries: 3
      taskRef:
        kind: Task
        name: ibm-pak
      params:
        - name: SCRIPT
          value: |
            oc apply -f - <<EOF
            apiVersion: v1
            kind: ConfigMap
            metadata:
              name: cloud-pak-deployer-config
              namespace: $(params.namespace)
            data:
              cpd-config.yaml: |
                global_config:
                  environment_name: demo
                  cloud_platform: existing-ocp
                  confirm_destroy: $(params.cpd-confirm-destroy)

                openshift:
                - name: cpd-demo
                  ocp_version: '$(params.ocp-client-version)'
                  cluster_name: cpd-demo
                  domain_name: example.com
                  openshift_ai:
                    install: $(params.install-openshift-ai)
                    channel: fast
                  gpu:
                    install: $(params.configure-gpu)
                  openshift_storage:
                  - storage_name: $(params.cloud-pak-deployer-storage-class)
                    storage_type: $(params.cloud-pak-deployer-storage-type)

                #
                # All tested cartridges. To install, change the "state" property to "installed". To uninstall, change the state
                # to "removed" or comment out the entire cartridge. Make sure that the "-" and properties are aligned with the lite
                # cartridge; the "-" is at position 3 and the property starts at position 5.
                #
                # If a cartridge has dependencies and you want to install it, you must ensure that the dependent cartridge is also
                # installed.
                #

                cp4d:
                - project: cpd
                  openshift_cluster_name: cpd-demo
                  cp4d_version: $(params.cp4d-version) 
                  sequential_install: $(params.cpd-sequential-install)
                  use_fs_iam: $(params.cpd-use-fs-iam)
                  accept_licenses: True
                  cartridges:
                  - name: cp-foundation
                    license_service:
                      state: disabled
                      threads_per_core: 2

                  - name: lite

                  - name: scheduler 
                    state: $(params.scheduler-state)

                  - name: analyticsengine
                    description: Analytics Engine Powered by Apache Spark 
                    size: $(params.analyticsengine-size) 
                    state: $(params.analyticsengine-state)
                    instances:
                    - name: Spark-watsonx-data
                      storage_size_gb: 50

                  - name: bigsql
                    description: Db2 Big SQL
                    state: $(params.bigsql-state)

                  - name: ca
                    description: Cognos Analytics
                    size: $(params.ca-size)
                    instances:
                    - name: $(params.ca-instance)
                      metastore_ref: ca-metastore
                    state: $(params.ca-state)

                  - name: dashboard
                    description: Cognos Dashboards
                    state: $(params.dashboard-state)

                  - name: datagate
                    description: Db2 Data Gate
                    state: $(params.datagate-state)

                  - name: dataproduct
                    description: Data Product Hub
                    state: $(params.dataproduct-state)

                  - name: datastage-ent
                    description: DataStage Enterprise
                    state: $(params.datastage-ent-state)

                  - name: datastage-ent-plus
                    description: DataStage Enterprise Plus
                    state: $(params.datastage-ent-plus-state)
                    # instances:
                    #   - name: ds-instance
                    #     # Optional settings
                    #     description: "datastage ds-instance"
                    #     size: medium
                    #     storage_class: efs-nfs-client
                    #     storage_size_gb: 60
                    #     # Custom Scale options
                    #     scale_px_runtime:
                    #       replicas: 2
                    #       cpu_request: 500m
                    #       cpu_limit: 2
                    #       memory_request: 2Gi
                    #       memory_limit: 4Gi
                    #     scale_px_compute:
                    #       replicas: 2
                    #       cpu_request: 1
                    #       cpu_limit: 3
                    #       memory_request: 4Gi
                    #       memory_limit: 12Gi 

                  - name: db2
                    description: Db2 OLTP
                    size: $(params.db2-size)
                    instances:
                    - name: ca-metastore
                      metadata_size_gb: 60
                      data_size_gb: 60
                      backup_size_gb: 60  
                      transactionlog_size_gb: 60
                    state: $(params.db2-state)

                  - name: db2wh
                    description: Db2 Warehouse
                    state: $(params.db2wh-state)

                  - name: dmc
                    description: Db2 Data Management Console
                    state: $(params.dmc-state)
                    instances:
                    - name: $(params.dmc-instance)
                      description: Data Management Console
                      size: medium
                      storage_size_gb: 50

                  - name: dods
                    description: Decision Optimization
                    size: $(params.dods-size)
                    state: $(params.dods-state)

                  - name: dp
                    description: Data Privacy
                    size: $(params.dp-size)
                    state: $(params.dp-state)

                  - name: dpra
                    description: Data Privacy Risk Assessment
                    state: $(params.dpra-state)

                  - name: dv
                    description: Data Virtualization
                    size: $(params.dv-size)
                    instances:
                    - name: $(params.dv-instance)
                    state: $(params.dv-state)

                  # Please note that for EDB Postgress, a secret edb-postgres-license-key must be created in the vault
                  # before deploying
                  - name: edb_cp4d
                    description: EDB Postgres
                    state: removed
                    instances:
                      - name: instance1
                        version: "15.4"
                        #type: Standard
                        #members: 1
                        #size_gb: 50
                        #resource_request_cpu: 1
                        #resource_request_memory: 4Gi
                        #resource_limit_cpu: 1
                        #resource_limit_memory: 4Gi

                  - name: factsheet
                    description: AI Factsheets
                    size: $(params.factsheet-size)
                    state: $(params.factsheet-state)

                  - name: hee
                    description: Execution Engine for Apache Hadoop
                    size: $(params.hadoop-size)
                    state: $(params.hadoop-state)

                  - name: mantaflow
                    description: MANTA Automated Lineage
                    size: $(params.mantaflow-size)
                    state: $(params.mantaflow-state)

                  - name: match360
                    description: IBM Match 360
                    size: $(params.match360-size)
                    wkc_enabled: $(params.match360-wkc-enabled)
                    state: $(params.match360-state)

                  - name: openpages
                    description: OpenPages
                    state: $(params.openpages-state)

                  # For Planning Analytics, the case version is needed due to defect in olm utils
                  - name: planning-analytics
                    description: Planning Analytics
                    state: $(params.planning-analytics-state)

                  - name: replication
                    description: Data Replication
                    license: IDRC
                    size: $(params.replication-size)
                    state: $(params.replication-state)

                  - name: rstudio
                    description: RStudio Server with R 3.6
                    size: $(params.rstudio-size)
                    state: $(params.rstudio-state)

                  - name: spss
                    description: SPSS Modeler
                    state: $(params.spss-state)
                  
                  - name: syntheticdata
                    description: Synthetic Data Generator
                    state: $(params.syntheticdata-state)

                  - name: voice-gateway
                    description: Voice Gateway
                    replicas: $(params.voice-gateway-replicas)
                    state: $(params.voice-gateway-state)

                  - name: watson-assistant
                    description: Watsonx Assistant
                    size: $(params.watsonx-assistant-size)
                    # noobaa_account_secret: noobaa-admin
                    # noobaa_cert_secret: noobaa-s3-serving-cert
                    state: $(params.watsonx-assistant-state)
                    instances:
                    - name: $(params.wa-instance)
                      description: "Watsonx Assistant instance"

                  - name: watson-discovery
                    description: Watson Discovery
                    # noobaa_account_secret: noobaa-admin
                    # noobaa_cert_secret: noobaa-s3-serving-cert
                    state: $(params.watson-discovery-state)
                    instances:
                    - name: $(params.watson-discovery-instance)
                      description: "Watson Discovery instance"

                  - name: watson-openscale
                    description: Watson OpenScale
                    size: $(params.watson-openscale-size)
                    state: $(params.watson-openscale-state)

                  - name: watson-speech
                    description: Watson Speech (STT and TTS)
                    stt_size: $(params.watson-speech-stt-size)
                    tts_size: $(params.watson-speech-tts-size)
                    state: $(params.watson-speech-state)

                  - name: watsonx_ai
                    description: watsonx.ai
                    state: $(params.watsonx-ai-state)
                    installation_options:
                      tuning_disabled: $(params.watsonx-ai-tuning-disabled)
                    models:
                    - model_id: allam-1-13b-instruct
                      state: $(params.llm-allam-1-13b-instruct-state)
                    - model_id: codellama-codellama-34b-instruct-hf
                      state: $(params.llm-codellama-codellama-34b-instruct-hf-state)
                    - model_id: elyza-japanese-llama-2-7b-instruct
                      state: $(params.llm-elyza-japanese-llama-2-7b-instruct-state)
                    - model_id: google-flan-ul2
                      state: $(params.llm-google-flan-ul2-state)
                    - model_id: google-flan-t5-xl
                      state: $(params.llm-google-flan-t5-xl-state)
                    - model_id: google-flan-t5-xxl
                      state: $(params.llm-google-flan-t5-xxl-state)
                    - model_id: eleutherai-gpt-neox-20b
                      state: $(params.llm-eleutherai-gpt-neox-20b-state)
                    - model_id: ibm-granite-8b-japanese
                      state: $(params.llm-ibm-granite-8b-japanese-state)
                    - model_id: ibm-granite-13b-chat-v1
                      state: $(params.llm-granite-13b-chat-v1-state)
                    - model_id: ibm-granite-13b-chat-v2
                      state: $(params.llm-granite-13b-chat-v2-state)
                    - model_id: ibm-granite-13b-instruct-v1
                      state: $(params.llm-ibm-granite-13b-instruct-v1-state)
                    - model_id: ibm-granite-13b-instruct-v2
                      state: $(params.llm-ibm-granite-13b-instruct-v2-state)
                    - model_id: ibm-granite-20b-multilingual
                      state: $(params.llm-ibm-granite-20b-multilingual-state)
                    - model_id: core42-jais-13b-chat
                      state: $(params.llm-core42-jais-13b-chat-state)
                    - model_id: meta-llama-llama-2-13b-chat
                      state: $(params.llm-meta-llama-llama-2-13b-chat-state)
                    - model_id: meta-llama-llama3-8b-instruct
                      state: $(params.llm-meta-llama-llama3-8b-instruct-state)
                    - model_id: meta-llama-llama-2-70b-chat
                      state: $(params.llm-meta-llama-llama-2-70b-chat-state)
                    - model_id: mncai-llama-2-13b-dpo-v7
                      state: $(params.llm-mncai-llama-2-13b-dpo-v7-state)
                    - model_id: ibm-mistralai-merlinite-7b
                      state: $(params.llm-ibm-mistralai-merlinite-7b-state)
                    - model_id: ibm-mpt-7b-instruct2
                      state: $(params.llm-ibm-mpt-7b-instruct2-state)
                    - model_id: mistralai-mixtral-8x7b-instruct-v01
                      state: $(params.llm-mistralai-mixtral-8x7b-instruct-v01-state)
                    - model_id: ibm-mistralai-mixtral-8x7b-instruct-v01-q
                      state: $(params.llm-ibm-mistralai-mixtral-8x7b-instruct-v01-q-state)
                    - model_id: bigscience-mt0-xxl
                      state: $(params.llm-bigscience-mt0-xxl-state)
                    - model_id: bigcode-starcoder
                      state: $(params.llm-bigcode-starcoder-state)

                  - name: watsonx_data
                    description: watsonx.data
                    state: $(params.watsonx-data-state)

                  - name: watsonx_governance
                    description: watsonx.governance
                    state: $(params.watsonx-governance-state)
                    installation_options:
                      installType: $(params.watsonx-gov-installType)
                      enableFactsheet: $(params.watsonx-gov-enableFactsheet)
                      enableOpenpages: $(params.watsonx-gov-enableOpenpages)
                      enableOpenscale: $(params.watsonx-gov-enableOpenscale)

                  - name: watsonx_orchestrate
                    description: watsonx.orchestrate
                    app_connect:
                      app_connect_project: ibm-app-connect
                      app_connect_case_version: 11.5.0
                      app_connect_channel_version: v11.5
                    state: $(params.watsonx-orchestrate-state)

                  - name: wkc
                    description: IBM Knowledge Catalog
                    size: $(params.wkc-size)
                    state: $(params.wkc-state)
                    installation_options:
                      enableKnowledgeGraph: $(params.wkc-options-knowledge-graph)
                      enableDataQuality: $(params.wkc-options-enable-data-quality)
                  
                  - name: ikc_premium
                    description: IBM Knowledge Catalog - Premium edition
                    size: $(params.ikc-premium-size)
                    state: $(params.ikc-premium-state)
                    installation_options:
                      enableKnowledgeGraph: $(params.ikc-premium-options-knowledge-graph)
                      enableDataQuality: $(params.ikc-premium-options-enable-data-quality)

                  - name: ikc_standard
                    description: IBM Knowledge Catalog - Standard edition
                    size: $(params.ikc-standard-size)
                    state: $(params.ikc-standard-state)
                    installation_options:
                      enableKnowledgeGraph: $(params.ikc-standard-options-knowledge-graph)
                      enableDataQuality: $(params.ikc-standard-options-enable-data-quality)

                  - name: wml
                    description: Watson Machine Learning
                    size: $(params.wml-size)
                    state: $(params.wml-state)

                  - name: wml-accelerator
                    description: Watson Machine Learning Accelerator
                    replicas: $(params.wml-accelerator-replicas)
                    size: $(params.wml-accelerator-size)
                    state: $(params.wml-accelerator-state)

                  - name: ws
                    description: Watson Studio
                    state: $(params.ws-state)

                  - name: ws-pipelines
                    description: Watson Studio Pipelines
                    state: removed
                  
                  - name: ws-runtimes
                    description: Watson Studio Runtimes
                    runtimes:
                    - ibm-cpd-ws-runtime-241-py
                    - ibm-cpd-ws-runtime-231-py
                    - ibm-cpd-ws-runtime-241-pygpu
                    - ibm-cpd-ws-runtime-231-pygpu
                    - ibm-cpd-ws-runtime-241-r
                    - ibm-cpd-ws-runtime-231-r
                    state: $(params.ws-runtimes-state)

                  # Cartridges where extra work is needed (will not install automatically)

                  # Product Master requires set up of the Db2 instance secret before install
                  - name: productmaster
                    description: Product Master
                    size: small  
                    state: removed 
            EOF
    - name: run-the-deployer
      taskRef:
        kind: Task
        name: ibm-pak
      timeout: 6h0m0s
      retries: 3
      runAfter:
        - configure-cloud-paks-services
      params:
        - name: SCRIPT
          value: |
            oc delete job cloud-pak-deployer -n $(params.namespace) --ignore-not-found

            sleep 20

            oc apply -f - <<EOF
            apiVersion: batch/v1
            kind: Job
            metadata:
              labels:
                app: cloud-pak-deployer
              name: cloud-pak-deployer
              namespace: $(params.namespace)
            spec:
              parallelism: 1
              completions: 1
              backoffLimit: 0
              template:
                metadata:
                  name: cloud-pak-deployer
                  labels:
                    app: cloud-pak-deployer
                spec:
                  containers:
                  - name: cloud-pak-deployer
                    image: quay.io/cloud-pak-deployer/cloud-pak-deployer:$(params.cloud-pak-deployer-version)
                    imagePullPolicy: Always
                    terminationMessagePath: /dev/termination-log
                    terminationMessagePolicy: File
                    env:
                    - name: CONFIG_DIR
                      value: /Data/cpd-config
                    - name: STATUS_DIR
                      value: /Data/cpd-status
                    - name: CP_ENTITLEMENT_KEY
                      valueFrom:
                        secretKeyRef:
                          key: cp-entitlement-key
                          name: cloud-pak-entitlement-key
                    volumeMounts:
                    - name: config-volume
                      mountPath: /Data/cpd-config/config
                    - name: status-volume
                      mountPath: /Data/cpd-status
                    command: ["/bin/sh","-xc"]
                    args: 
                      - /cloud-pak-deployer/cp-deploy.sh env apply -v
                  restartPolicy: Never
                  securityContext:
                    runAsUser: 0
                  serviceAccountName: cloud-pak-deployer-sa
                  volumes:
                  - name: config-volume
                    configMap:
                      name: cloud-pak-deployer-config
                  - name: status-volume
                    persistentVolumeClaim:
                      claimName: cloud-pak-deployer-status
            EOF

            sleep 20

            while true
            do
              is_complete=$(oc get -n $(params.namespace) job/cloud-pak-deployer -o yaml | yq '.status.conditions.[] | select(.type == "Complete") | contains({"status": "'True'"})')
              if [[ $is_complete != "true" ]]; then
                echo "Waiting for job to be Complete. See cloud-pak-deployer pod's logs in project cloud-pak-deployer for more details."
              else
                echo "Cloud Pak Deployer job is Complete."
                break
              fi

              did_fail=$(oc get -n $(params.namespace) job/cloud-pak-deployer -o yaml | yq '.status.conditions.[] | select(.type == "Failed") | contains({"status": "'True'"})')
              if [[ $did_fail == "true" ]]; then
                echo "Cloud Pak Deployer job failed."
                echo $(oc get -n $(params.namespace) job/cloud-pak-deployer -o yaml | yq '.status.conditions.[] | select(.type == "Failed") | .reason')
                echo $(oc get -n $(params.namespace) job/cloud-pak-deployer -o yaml | yq '.status.conditions.[] | select(.type == "Failed") | .message')
                exit 68
              fi
              
              sleep 10
            done
    - name: run-the-deployer-debug
      taskRef:
        kind: Task
        name: ibm-pak
      timeout: 6h0m0s
      retries: 3
      runAfter:
        - configure-cloud-paks-services
      params:
        - name: SCRIPT
          value: |
            oc apply -f - <<EOF
            apiVersion: batch/v1
            kind: Job
            metadata:
              labels:
                app: cloud-pak-deployer-debug
              name: cloud-pak-deployer-debug
              namespace: $(params.namespace)
            spec:
              parallelism: 1
              completions: 1
              backoffLimit: 2
              template:
                metadata:
                  name: cloud-pak-deployer-debug
                  labels:
                    app: cloud-pak-deployer-debug
                spec:
                  containers:
                  - name: cloud-pak-deployer-debug
                    image: quay.io/cloud-pak-deployer/cloud-pak-deployer:$(params.cloud-pak-deployer-version)
                    imagePullPolicy: Always
                    terminationMessagePath: /dev/termination-log
                    terminationMessagePolicy: File
                    env:
                    - name: CONFIG_DIR
                      value: /Data/cpd-config
                    - name: STATUS_DIR
                      value: /Data/cpd-status
                    volumeMounts:
                    - name: config-volume
                      mountPath: /Data/cpd-config/config
                    - name: status-volume
                      mountPath: /Data/cpd-status
                    command: ["/bin/sh","-xc"]
                    args: 
                      - sleep infinity
                  restartPolicy: Never
                  securityContext:
                    runAsUser: 0
                  serviceAccountName: cloud-pak-deployer-sa
                  volumes:
                  - name: config-volume
                    configMap:
                      name: cloud-pak-deployer-config
                  - name: status-volume
                    persistentVolumeClaim:
                      claimName: cloud-pak-deployer-status
            EOF

    ##### CP4I tasks
    - name: add-catalog-sources
      params:
        - name: SCRIPT
          value: |-
            echo "Add catalog sources"
            oc apply -f - <<EOF 
            apiVersion: operators.coreos.com/v1alpha1
            kind: CatalogSource
            metadata:
              name: ibm-apiconnect-catalog
              namespace: openshift-marketplace
            spec:
              displayName: ibm-apiconnect-5.2.0
              publisher: IBM
              image: icr.io/cpopen/ibm-apiconnect-catalog@sha256:61f52267bff3beb4455636763af4c95c6a5b7bc57b159ce0846d53364f2d4134
              sourceType: grpc
              updateStrategy:
                registryPoll:
                  interval: 30m0s
            EOF

            oc apply -f - <<EOF 
            apiVersion: operators.coreos.com/v1alpha1
            kind: CatalogSource
            metadata:
              name: opencloud-operators
              namespace: openshift-marketplace
            spec:
              displayName: ibm-cp-common-services-4.6.4
              publisher: IBM
              image: icr.io/cpopen/ibm-common-service-catalog@sha256:9d00de6ec33a429cf9eb621461b9fd428522d626905658d32e294e031990aa9b
              sourceType: grpc
              updateStrategy:
                registryPoll:
                  interval: 30m0s
            EOF

            oc apply -f - <<EOF 
            apiVersion: operators.coreos.com/v1alpha1
            kind: CatalogSource
            metadata:
              name: ibm-datapower-operator-catalog
              namespace: openshift-marketplace
            spec:
              displayName: ibm-datapower-operator-1.11.1
              publisher: IBM
              image: icr.io/cpopen/datapower-operator-catalog@sha256:8edd54bff60b24316cd7cc90db3d6c6918bb04e5a2265e81de6d46c526997545
              sourceType: grpc
              updateStrategy:
                registryPoll:
                  interval: 30m0s
            EOF

            oc apply -f - <<EOF 
            apiVersion: operators.coreos.com/v1alpha1
            kind: CatalogSource
            metadata:
              name: ibm-integration-platform-navigator-catalog
              namespace: openshift-marketplace
            spec:
              displayName: ibm-integration-platform-navigator-7.3.0
              publisher: IBM
              image: icr.io/cpopen/ibm-integration-platform-navigator-catalog@sha256:80ce1e6752d359870237ed30ba24f6271241e499e546214f30f4eb0962ec5029
              sourceType: grpc
              updateStrategy:
                registryPoll:
                  interval: 30m0s
            EOF
      taskRef:
        kind: Task
        name: ibm-pak
      runAfter:
        - run-the-deployer 
    - name: install-operators
      params:
        - name: SCRIPT
          value: |-
            echo "Installing operators"
            echo "Create namespace"
            oc apply -f - <<EOF 
            apiVersion: v1
            kind: Namespace
            metadata:
              name: $(params.cp4i-namespace)
            EOF

            echo "Create OperatorGroup"
            oc apply -f - <<EOF 
            apiVersion: operators.coreos.com/v1
            kind: OperatorGroup
            metadata:
              name: ibm-integration-operatorgroup
              labels:
                backup.integration.ibm.com/component: operatorgroup     
              namespace: $(params.cp4i-namespace)           
            spec:
              targetNamespaces:
              - $(params.cp4i-namespace)
            EOF

            echo "Create ibm-common-service-operator"
            oc apply -f - <<EOF 
            apiVersion: operators.coreos.com/v1alpha1
            kind: Subscription
            metadata:
              name: ibm-common-service-operator
              labels:
                operators.coreos.com/ibm-common-service-operator.integration: ''    
              namespace: $(params.cp4i-namespace)     
            spec:
              channel: v4.6
              installPlanApproval: Automatic
              name: ibm-common-service-operator
              source: opencloud-operators
              sourceNamespace: openshift-marketplace
            EOF


            echo "Create ibm-integration-platform-navigator"
            oc apply -f - <<EOF 
            apiVersion: operators.coreos.com/v1alpha1
            kind: Subscription
            metadata:
              name: ibm-integration-platform-navigator
              namespace: $(params.cp4i-namespace) 
            spec:
              channel: v7.3-sc2
              name: ibm-integration-platform-navigator
              source: ibm-integration-platform-navigator-catalog
              sourceNamespace: openshift-marketplace
              installPlanApproval: Automatic  
            EOF

            echo "Create datapower-operator"
            oc apply -f - <<EOF 
            apiVersion: operators.coreos.com/v1alpha1
            kind: Subscription
            metadata:
              name: datapower-operator
              namespace: $(params.cp4i-namespace)  
            spec:
              channel: v1.11-sc2
              name: datapower-operator
              source: ibm-datapower-operator-catalog
              sourceNamespace: openshift-marketplace
              installPlanApproval: Automatic  
            EOF

            echo "Create ibm-apiconnect"
            oc apply -f - <<EOF 
            apiVersion: operators.coreos.com/v1alpha1
            kind: Subscription
            metadata:
              name: ibm-apiconnect
              namespace: $(params.cp4i-namespace) 
            spec:
              channel: v5.2-sc2
              name: ibm-apiconnect
              source: ibm-apiconnect-catalog
              sourceNamespace: openshift-marketplace
              installPlanApproval: Automatic 
            EOF
      taskRef:
        kind: Task
        name: ibm-pak
      runAfter:
        - add-catalog-sources        

    - name: create-platform-ui
      params:
        - name: SCRIPT
          value: |-
            echo "wait for the platform operator"

            oc get operator ibm-integration-platform-navigator.integration -o yaml | yq '.status.components.refs[].conditions.[]'


            i=0
            while true
            do
              status=$(oc get operator ibm-integration-platform-navigator.integration -o yaml | yq '.status.components.refs[].conditions.[] | select(.type == "Succeeded") | contains({"status": "'True'"})')
              echo "Current status: $status"
              # Check to see if the deployment exists and apply patch if it does
              if [ -z "$status" ] || [ $status != "true" ] ; then
                echo "[$((120 -$i))] Still waiting for platformnavigator operator to be ready"
              else
                echo "Platformnavigator operator  ready"
                break
              fi

              ((i++))
              sleep 60
              if [[ "$i" == '120' ]]; then
                echo "Deployment Platformnavigator not created within timeout limit"
                exit 1
              fi
            done 

            echo "Create platform navigator instance"
            oc apply -f - <<EOF 
            apiVersion: integration.ibm.com/v1beta1
            kind: PlatformNavigator
            metadata:
              name: integration-quickstart
              namespace: $(params.cp4i-namespace)
              labels:
                backup.integration.ibm.com/component: platformnavigator        
            spec:
              license:
                accept: true
                license: L-JTPV-KYG8TF
              replicas: 1
              version: 16.1.0
            EOF

      taskRef:
        kind: Task
        name: ibm-pak
      runAfter:
        - install-operators        
    - name: create-api-connect
      params:
        - name: SCRIPT
          value: |-
            echo "wait for the api-connect operator"

            oc get operator ibm-apiconnect.integration -o yaml | yq '.status.components.refs[].conditions.[]'

            i=0
            while true
            do
              status=$(oc get operator ibm-apiconnect.integration -o yaml | yq '.status.components.refs[].conditions.[] | select(.type == "Succeeded") | contains({"status": "'True'"})')
              echo "Current status: $status"
              # Check to see if the deployment exists and apply patch if it does
              if [ -z "$status" ] || [ $status != "true" ] ; then
                echo "[$((120 -$i))] Still waiting for apiconnect operator to be ready"
              else
                echo "apiconnect operator  ready"
                break
              fi

              ((i++))
              sleep 60
              if [[ "$i" == '120' ]]; then
                echo "Deployment apiconnect not created within timeout limit"
                exit 1
              fi
            done 

            echo "Create apiconnect instance"
            oc apply -f - <<EOF 
            kind: APIConnectCluster
            apiVersion: apiconnect.ibm.com/v1beta1
            metadata:
              name: api-management
              namespace: $(params.cp4i-namespace)
              annotations: 
                apiconnect-operator/backups-not-configured: "true"  
              labels:
                app.kubernetes.io/instance: apiconnect
                app.kubernetes.io/managed-by: ibm-apiconnect
                app.kubernetes.io/name: apiconnect-small    
            spec:
              license:
                accept: true
                license: L-DZZQ-MGVN8V
                metric: VIRTUAL_PROCESSOR_CORE
                use: production
              profile: n1xc7.m48
              version: 10.0.8.0
              storageClassName: ocs-storagecluster-ceph-rbd
              management:
                billing:
                  enabled: true              
            EOF
      taskRef:
        kind: Task
        name: ibm-pak
      runAfter:
        - create-platform-ui        
    ### OpenLDAP tasks
    - name: openldap-setup
      params:
        - name: SCRIPT
          value: |-
            oc apply -f - <<EOF 
            apiVersion: v1
            kind: Namespace
            metadata:
              name: $(params.openldap-namespace)
            EOF

            oc apply -f - <<EOF 
            apiVersion: v1
            kind: PersistentVolumeClaim
            metadata:
              name: openldap-data
              namespace: $(params.openldap-namespace)
            spec:
              accessModes:
                - ReadWriteOnce
              volumeMode: Filesystem
              storageClassName: ocs-storagecluster-ceph-rbd
              resources:
                requests:
                  storage: 1Gi
            EOF

            export LDAP_PWD=$(tr -dc A-Za-z0-9 </dev/urandom | head -c 13; echo)
            echo $LDAP_PWD
            oc create secret -n $(params.openldap-namespace) generic openldap --from-literal adminpassword="$LDAP_PWD"

            cat <<EOF > users.ldif
            # acme.org
            dn: dc=acme,dc=org
            objectClass: dcObject
            objectClass: organization
            dc: acme
            o: acme

            # users, acme.org
            dn: ou=users,dc=acme,dc=org
            objectClass: organizationalUnit
            ou: users

            # provider-1, users, acme.org
            dn: cn=provider-1,ou=users,dc=acme,dc=org
            cn: provider-1
            sn: Bar1
            objectClass: inetOrgPerson
            objectClass: posixAccount
            objectClass: shadowAccount
            userPassword:: cGFzc3cwcmQ=
            uid: provider-1
            uidNumber: 1000
            gidNumber: 1000
            homeDirectory: /home/provider-1
            mail: provider-1@consumer-org.org

            # provider-2, users, acme.org
            dn: cn=provider-2,ou=users,dc=acme,dc=org
            cn: provider-2
            sn: Bar2
            objectClass: inetOrgPerson
            objectClass: posixAccount
            objectClass: shadowAccount
            userPassword:: cGFzc3cwcmQ=
            uid: provider-2
            uidNumber: 1001
            gidNumber: 1001
            homeDirectory: /home/provider-2
            mail: provider-2@consumer-org.org

            # provider-3, users, acme.org
            dn: cn=provider-3,ou=users,dc=acme,dc=org
            cn: provider-3
            sn: Bar2
            objectClass: inetOrgPerson
            objectClass: posixAccount
            objectClass: shadowAccount
            userPassword:: cGFzc3cwcmQ=
            uid: provider-3
            uidNumber: 1002
            gidNumber: 1002
            homeDirectory: /home/provider-3
            mail: provider-3@consumer-org.org

            # provider-4, users, acme.org
            dn: cn=provider-4,ou=users,dc=acme,dc=org
            cn: provider-4
            sn: Bar2
            objectClass: inetOrgPerson
            objectClass: posixAccount
            objectClass: shadowAccount
            userPassword:: cGFzc3cwcmQ=
            uid: provider-4
            uidNumber: 1003
            gidNumber: 1003
            homeDirectory: /home/provider-4
            mail: provider-4@consumer-org.org

            # provider-5, users, acme.org
            dn: cn=provider-5,ou=users,dc=acme,dc=org
            cn: provider-5
            sn: Bar2
            objectClass: inetOrgPerson
            objectClass: posixAccount
            objectClass: shadowAccount
            userPassword:: cGFzc3cwcmQ=
            uid: provider-5
            uidNumber: 1004
            gidNumber: 1004
            homeDirectory: /home/provider-5      
            mail: provider-5@consumer-org.org                             

            # provider-6, users, acme.org
            dn: cn=provider-6,ou=users,dc=acme,dc=org
            cn: provider-6
            sn: Bar2
            objectClass: inetOrgPerson
            objectClass: posixAccount
            objectClass: shadowAccount
            userPassword:: cGFzc3cwcmQ=
            uid: provider-6
            uidNumber: 1005
            gidNumber: 1005
            homeDirectory: /home/provider-6      
            mail: provider-6@consumer-org.org   

            # developer-1, users, acme.org
            dn: cn=developer-1,ou=users,dc=acme,dc=org
            cn: developer-1
            sn: Bar5
            objectClass: inetOrgPerson
            objectClass: posixAccount
            objectClass: shadowAccount
            userPassword:: cGFzc3cwcmQ=
            uid: developer-1
            uidNumber: 1101
            gidNumber: 1101
            homeDirectory: /home/developer-1
            mail: developer-1@acme.org

            # consumer-1, users, acme.org
            dn: cn=consumer-1,ou=users,dc=acme,dc=org
            cn: consumer-1
            sn: Bar7
            objectClass: inetOrgPerson
            objectClass: posixAccount
            objectClass: shadowAccount
            userPassword:: cGFzc3cwcmQ=
            uid: consumer-1
            uidNumber: 1201
            gidNumber: 1201
            homeDirectory: /home/consumer-1
            mail: consumer-1@consumer-org.org

            # consumer-2, users, acme.org
            dn: cn=consumer-2,ou=users,dc=acme,dc=org
            cn: consumer-2
            sn: Bar8
            objectClass: inetOrgPerson
            objectClass: posixAccount
            objectClass: shadowAccount
            userPassword:: cGFzc3cwcmQ=
            uid: consumer-2
            uidNumber: 1202
            gidNumber: 1202
            homeDirectory: /home/consumer-2
            mail: consumer-2@consumer-org.org

            # cpd_platform_users, users, acme.org
            dn: cn=cpd_platform_users,ou=users,dc=acme,dc=org
            cn: cpd_platform_users
            objectClass: groupOfNames
            member: cn=provider-1,ou=users,dc=acme,dc=org
            member: cn=provider-2,ou=users,dc=acme,dc=org
            member: cn=provider-3,ou=users,dc=acme,dc=org
            member: cn=provider-4,ou=users,dc=acme,dc=org
            member: cn=provider-5,ou=users,dc=acme,dc=org
            member: cn=provider-6,ou=users,dc=acme,dc=org
            member: cn=developer-1,ou=users,dc=acme,dc=org
            member: cn=consumer-1,ou=users,dc=acme,dc=org
            member: cn=consumer-2,ou=users,dc=acme,dc=org
            EOF

            oc create configmap -n $(params.openldap-namespace) ldap-users --from-file=users.ldif

            echo "Create deployment"
            oc apply -f - <<EOF 
            kind: Deployment
            apiVersion: apps/v1
            metadata:
              name: openldap-openldap-bitnami
              namespace: $(params.openldap-namespace)
            spec:
              replicas: 1
              selector:
                matchLabels:
                  app.kubernetes.io/instance: openldap
                  app.kubernetes.io/name: openldap-bitnami
              template:
                metadata:
                  creationTimestamp: null
                  labels:
                    app.kubernetes.io/instance: openldap
                    app.kubernetes.io/name: openldap-bitnami
                spec:
                  volumes:
                    - name: openldap-data
                      persistentVolumeClaim:
                        claimName: openldap-data
                    - name: users-volume
                      configMap:
                        name: ldap-users
                        defaultMode: 420
                  containers:
                    - resources: {}
                      readinessProbe:
                        tcpSocket:
                          port: 1389
                        initialDelaySeconds: 15
                        timeoutSeconds: 1
                        periodSeconds: 15
                        successThreshold: 1
                        failureThreshold: 3
                      terminationMessagePath: /dev/termination-log
                      name: openldap-bitnami
                      livenessProbe:
                        tcpSocket:
                          port: 1389
                        initialDelaySeconds: 15
                        timeoutSeconds: 1
                        periodSeconds: 15
                        successThreshold: 1
                        failureThreshold: 3
                      env:
                        - name: LDAP_SKIP_DEFAULT_TREE
                          value: 'yes'
                        - name: LDAP_ADMIN_PASSWORD
                          valueFrom:
                            secretKeyRef:
                              name: openldap
                              key: adminpassword              
                        - name: LDAP_CUSTOM_LDIF_DIR
                          value: /ldifs
                        - name: LDAP_ROOT
                          value: dc=acme,dc=org
                      securityContext:
                        capabilities:
                          add:
                            - NET_BIND_SERVICE
                          drop:
                            - ALL
                        runAsNonRoot: true
                        readOnlyRootFilesystem: false
                      ports:
                        - name: ldap-tcp
                          containerPort: 1389
                          protocol: TCP
                        - name: ldap-udp
                          containerPort: 1389
                          protocol: UDP
                        - name: ldaps-tcp
                          containerPort: 1636
                          protocol: TCP
                        - name: ldaps-udp
                          containerPort: 1636
                          protocol: UDP
                      imagePullPolicy: Always
                      startupProbe:
                        tcpSocket:
                          port: 1389
                        timeoutSeconds: 1
                        periodSeconds: 10
                        successThreshold: 1
                        failureThreshold: 12
                      volumeMounts:
                        - name: openldap-data
                          mountPath: /bitnami/openldap
                        - name: users-volume              
                          mountPath: /ldifs
                      image: 'bitnami/openldap:2.6.6'
            EOF

            echo "Create service"
            oc apply -f - <<EOF 
            kind: Service
            apiVersion: v1
            metadata:
              name: openldap
              namespace: $(params.openldap-namespace)
            spec:
              ports:
                - name: ldap-tcp
                  protocol: TCP
                  port: 389
                  targetPort: 1389
                - name: ldaps-tcp
                  protocol: TCP
                  port: 636
                  targetPort: 1636
              selector:
                app.kubernetes.io/instance: openldap
                app.kubernetes.io/name: openldap-bitnami
            EOF
      taskRef:
        kind: Task
        name: ibm-pak
      runAfter:
        - run-the-deployer          
      workspaces:
        - name: manifest-dir
          workspace: workspace
    - name: openldap-cp4d
      params:
        - name: SCRIPT
          value: |-
            export CPD_ROUTE=$(oc get route cpd -n cpd -o jsonpath="{.spec.host}")
            export CPD_ADMIN=cpadmin
            export CPD_ADMIN_PASSWD=$(oc extract --namespace cpd secret/platform-auth-idp-credentials --keys=admin_password --to=-)
            export IDP_ROUTE=$(oc get routes -n cpd cp-console -o jsonpath='{.spec.host}')
            echo "IDP Route: $IDP_ROUTE"
            export ACCESS_TOKEN=$(curl -k -X POST -H "Content-Type: application/x-www-form-urlencoded;charset=UTF-8"  -d "grant_type=password&username=$CPD_ADMIN&password=$CPD_ADMIN_PASSWD&scope=openid" "https://$IDP_ROUTE/idprovider/v1/auth/identitytoken" | jq -r .access_token)
            echo "ACCESS_TOKEN: $ACCESS_TOKEN"

            export LDAP_PASSWD=$(oc extract --namespace openldap secret/openldap --keys=adminpassword --to=- | base64 )

            # test connection - TODO - loop here
            echo "Test connection"

            i=0
            while true
            do
              export TEST_RESULT=$(curl -k -X POST "https://$IDP_ROUTE/idprovider/v3/auth/idsource/ldap/validateConnection" \
              --header 'Content-Type: application/json' \
              --header "Authorization: Bearer $ACCESS_TOKEN" \
              --data-raw \
              "{ 
                  \"name\": \"openLDAP\",
                  \"idp_config\": {
                      \"ldap_url\": \"ldap://openldap.openldap:389\",
                      \"ldap_basedn\": \"dc=acme,dc=org\",
                      \"ldap_binddn\": \"cn=admin,dc=acme,dc=org\",
                      \"ldap_bindpassword\": \"$LDAP_PASSWD\"
                  }
              }" | jq -r .status)

              echo "Current status: $TEST_RESULT"
              # Check to see if the deployment exists and apply patch if it does
              if [ -z "$TEST_RESULT" ] || [ $TEST_RESULT != "success" ] ; then
                echo "[$((120 -$i))] Still waiting for openldap to be ready"
              else
                echo "openldap  ready"
                break
              fi

              ((i++))
              sleep 60
              if [[ "$i" == '20' ]]; then
                echo "openldap not ready within timeout limit"
                exit 1
              fi
            done

            curl -k -X POST "https://$IDP_ROUTE/idprovider/v3/auth/idsource/" \
            --header 'Content-Type: application/json' \
            --header "Authorization: Bearer $ACCESS_TOKEN" \
            --data-raw \
            "{
              \"name\": \"openldap\",
              \"description\": \"\",
              \"protocol\": \"ldap\",
              \"type\": \"Custom\",
              \"idp_config\": {
                    \"ldap_id\": \"openldap\",
                    \"ldap_realm\": \"REALM\",
                    \"ldap_url\": \"ldap://openldap.openldap:389\",
                    \"ldap_basedn\": \"dc=acme,dc=org\",
                    \"ldap_binddn\": \"cn=admin,dc=acme,dc=org\",
                    \"ldap_bindpassword\": \"$LDAP_PASSWD\",
                    \"ldap_type\": \"Custom\",
                    \"ldap_ignorecase\": \"false\",
                    \"ldap_userfilter\": \"(&(uid=%v)(objectclass=inetOrgPerson))\",
                    \"ldap_useridmap\": \"*:uid\",
                    \"ldap_groupfilter\": \"(&(cn=%v)(objectclass=groupOfNames))\",
                    \"ldap_groupidmap\": \"*:cn\",
                    \"ldap_groupmemberidmap\": \"groupOfNames:member\",
                    \"ldap_nestedsearch\": \"false\",
                    \"ldap_pagingsearch\": \"false\"
                    }
            }"
      taskRef:
        kind: Task
        name: ibm-pak
      runAfter:
        - openldap-setup        
      workspaces:
        - name: manifest-dir
          workspace: workspace
    ######## mail server
    - name: mailserver-setup
      params:
        - name: SCRIPT
          value: |-
            oc apply -f - <<EOF 
            apiVersion: v1
            kind: Namespace
            metadata:
              name: development-mailserver
            EOF

            echo "Create deployment"
            oc apply -f - <<EOF 
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              name: maildev
              namespace: development-mailserver
              labels:
                app: maildev
            spec:
              replicas: 1
              selector:
                matchLabels:
                  app: maildev
              template:
                metadata:
                  labels:
                    app: maildev
                spec:
                  containers:
                  - name: maildev
                    # Todo: Use stable
                    image: maildev/maildev:2.1.0
                    args: ["-s", "1025", "-w", "1080"]
            EOF

            echo "Create service"
            oc apply -f - <<EOF 
            apiVersion: v1
            kind: Service
            metadata:
              name: mailserver
              namespace: development-mailserver
            spec:
              selector:
                app: maildev
              ports:
                - name: smtp
                  protocol: TCP
                  port: 1025
                  targetPort: 1025
                - name: http
                  protocol: TCP
                  port: 1080
                  targetPort: 1080
            EOF

            echo "create route for UI"
            oc apply -f - <<EOF 
            kind: Route
            apiVersion: route.openshift.io/v1
            metadata:
              name: mail-dashboard
              namespace: development-mailserver
            spec:
              to:
                kind: Service
                name: mailserver
                weight: 100
              port:
                targetPort: http
            EOF

            MAIL_ROUTE=$(oc get route mail-dashboard -n development-mailserver -o jsonpath="{.spec.host}")
            echo "Mail dashbord: http://$MAIL_ROUTE"

      taskRef:
        kind: Task
        name: ibm-pak   
    ########## stepzen
    - name: namespace-setup
      params:
        - name: SCRIPT
          value: |-
            echo "Create stepzen namespace"
            oc apply -f - <<EOF 
            apiVersion: v1
            kind: Namespace
            metadata:
              name: stepzen
            EOF

            echo "Create operator group for stepzen"
            oc apply -f - <<EOF 
            apiVersion: operators.coreos.com/v1
            kind: OperatorGroup
            metadata:
              name: stepzen-group
              namespace: stepzen           
            spec:
              targetNamespaces:
              - stepzen
            EOF

            echo "copy entitelment key"
            export ibm_entitlement_key=$(oc extract --namespace cloud-pak-deployer secret/cloud-pak-entitlement-key --keys=cp-entitlement-key --to=-)
            oc create secret -n stepzen docker-registry ibm-entitlement-key --docker-server=cp.icr.io --docker-username=cp --docker-password=$ibm_entitlement_key

            echo "key created"
      taskRef:
        kind: Task
        name: ibm-pak
      runAfter:
        - run-the-deployer
    - name: install-postgres-operator
      params:
        - name: SCRIPT
          value: |-
            echo "Create crunchy-postgres-operator"
            oc apply -f - <<EOF 
            apiVersion: operators.coreos.com/v1alpha1
            kind: Subscription
            metadata:
              name: crunchy-postgres-operator
              namespace: stepzen 
            spec:
              channel: v5
              name: crunchy-postgres-operator
              source: certified-operators
              sourceNamespace: openshift-marketplace
              startingCSV: postgresoperator.v5.6.0
              installPlanApproval: Automatic  
            EOF
      taskRef:
        kind: Task
        name: ibm-pak
      runAfter:
        - namespace-setup
    - name: create-postgres-cluster
      params:
        - name: SCRIPT
          value: |-
            echo "wait for the platform operator"

            oc get operator crunchy-postgres-operator.stepzen -o yaml | yq '.status.components.refs[].conditions.[]'


            i=0
            while true
            do
              status=$(oc get operator crunchy-postgres-operator.stepzen -o yaml | yq '.status.components.refs[].conditions.[] | select(.type == "Succeeded") | contains({"status": "'True'"})')
              echo "Current status: $status"
              # Check to see if operator is ready
              if [ -z "$status" ] || [ $status != "true" ] ; then
                echo "[$((120 -$i))] Still waiting for postgres operator to be ready"
              else
                echo "postgres operator  ready"
                break
              fi

              ((i++))
              sleep 60
              if [[ "$i" == '120' ]]; then
                echo "Deployment postgres not created within timeout limit"
                exit 1
              fi
            done 

            echo "Create postgres instance"
            oc apply -f - <<EOF 
            apiVersion: postgres-operator.crunchydata.com/v1beta1
            kind: PostgresCluster
            metadata:
              name: postgres-cluster
              namespace: stepzen
            spec:
              port: 5432
              backups:
                pgbackrest:
                  repos:
                    - volume:
                        volumeClaimSpec:
                          accessModes:
                            - ReadWriteOnce
                          resources:
                            requests:
                              storage: 1Gi
                      name: repo1
              instances:
                - dataVolumeClaimSpec:
                    accessModes:
                      - ReadWriteOnce
                    resources:
                      requests:
                        storage: 1Gi
                  replicas: 1
              postgresVersion: 15
            EOF

            echo "wait for cluster to be ready"
            i=0
            while true
            do
              status=$(oc get -n stepzen pod -l "postgres-operator.crunchydata.com/data=postgres" -o yaml | yq '.items[0].status.conditions[] | select(.type == "Ready") | contains({"status": "'True'"})')
              echo "Current status: $status"
              # Check to see if operator is ready
              if [ -z "$status" ] || [ $status != "true" ] ; then
                echo "[$((120 -$i))] Still waiting for postgres cluster to be ready"
              else
                echo "postgres cluster ready"
                break
              fi

              ((i++))
              sleep 60
              if [[ "$i" == '120' ]]; then
                echo "postgres cluster not created within timeout limit"
                exit 1
              fi
            done 
      taskRef:
        kind: Task
        name: ibm-pak
      runAfter:
        - install-postgres-operator        
    - name: deploy-stepzen
      params:
        - name: SCRIPT
          value: |-
            echo "Create db-secret"
            export dsn=$(oc extract -n stepzen secret/postgres-cluster-pguser-postgres-cluster --keys=uri --to=-)
            oc create secret -n stepzen generic db-secret --from-literal DSN="$dsn" 

            ls -la
            echo "Download stepzen"
            curl -k https://raw.githubusercontent.com/IBM/cloud-pak/master/repo/case/ibm-stepzen-case/1.0.0%2B20240709.000001/ibm-stepzen-case-1.0.0%2B20240709.000001.tgz -o ibm-stepzen-case-1.0.0+20240709.000001.tgz
            tar -vxzf ibm-stepzen-case-1.0.0+20240709.000001.tgz

            ls -la

            cd ibm-stepzen-case/inventory/stepzenGraphOperator/files/deploy
            oc project stepzen
            echo "Install operator"
            oc apply -f operator.yaml
            echo "Create CRD"
            oc apply -f crd.yaml            

            echo "wait for operator pod to be ready"
            i=0
            while true
            do
              status=$(oc get -n stepzen pod -l "control-plane=stepzen-graph-operator" -o yaml | yq '.items[0].status.conditions[] | select(.type == "Ready") | contains({"status": "'True'"})')
              echo "Current status: $status"
              # Check to see if operator is ready
              if [ -z "$status" ] || [ $status != "true" ] ; then
                echo "[$((120 -$i))] Still waiting for stepzen operator to be ready"
              else
                echo " stepzen operator ready"
                break
              fi

              ((i++))
              sleep 60
              if [[ "$i" == '120' ]]; then
                echo " stepzen operator not created within timeout limit"
                exit 1
              fi
            done 

            echo "Customize CR"
            cat cr.yaml
            yq -i '.spec.license.accept = true' cr.yaml
            yq -i '.spec.controlDatabaseSecret = "db-secret"' cr.yaml
            echo "final CR"
            echo "================"
            cat cr.yaml

            oc apply -f cr.yaml
            echo "wait for stepzen server"
            i=0
            while true
            do
              status=$(oc get stepzengraphserver stepzen -o yaml | yq '.status.conditions.[] | select(.type == "Ready") | contains({"status": "'True'"})')
              echo "Current status: $status"
              # Check to see if stepzengraphserver is ready
              if [ -z "$status" ] || [ $status != "true" ] ; then
                echo "[$((120 -$i))] Still waiting for stepzengraphserver to be ready"
              else
                echo "stepzengraphserver  ready"
                break
              fi

              ((i++))
              sleep 60
              if [[ "$i" == '120' ]]; then
                echo "stepzengraphserver not created within timeout limit"
                exit 1
              fi
            done
      taskRef:
        kind: Task
        name: ibm-pak
      runAfter:
        - create-postgres-cluster        
      workspaces:
        - name: manifest-dir
          workspace: workspace        
    - name: install-openshift-routes
      params:
        - name: SCRIPT
          value: |-
            echo "install openshift routes"
            oc project ibm-cert-manager
            
            oc apply -f - <<EOF 
            ---
            apiVersion: rbac.authorization.k8s.io/v1
            kind: ClusterRole
            metadata:
              name: cert-manager-openshift-routes
            rules:
            - apiGroups:
              - route.openshift.io
              resources:
              - routes
              verbs:
              - get
              - list
              - watch
              - patch
              - update
            - apiGroups:
              - route.openshift.io
              resources:
              - routes/finalizers
              verbs:
              - update
            - apiGroups:
              - route.openshift.io
              resources:
              - routes/custom-host
              verbs:
              - create
              - update
            - apiGroups:
              - cert-manager.io
              resources:
              - certificaterequests
              verbs:
              - create
              - get
              - list
              - watch
            - apiGroups:
                - cert-manager.io
              resources:
                - certificaterequests/status
              verbs:
                - get
                - list
                - watch
            - apiGroups:
              - ""
              resources:
              - events
              verbs:
              - create
              - patch
            - apiGroups:
              - coordination.k8s.io
              resources:
              - leases
              verbs:
              - create
              - get
              - list
              - update
            ---
            apiVersion: v1
            kind: ServiceAccount
            metadata:
              name: cert-manager-openshift-routes
              namespace: ibm-cert-manager
            automountServiceAccountToken: false
            ---
            apiVersion: rbac.authorization.k8s.io/v1
            kind: ClusterRoleBinding
            metadata:
              name: cert-manager-openshift-routes
            roleRef:
              apiGroup: rbac.authorization.k8s.io
              kind: ClusterRole
              name: cert-manager-openshift-routes
            subjects:
            - kind: ServiceAccount
              name: cert-manager-openshift-routes
              namespace: ibm-cert-manager
            ---
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              name: cert-manager-openshift-routes
              namespace: ibm-cert-manager
              labels:
                app.kubernetes.io/name: cert-manager-openshift-routes
                app.kubernetes.io/version: "0.5.0"
                app.kubernetes.io/component: controller
                app.kubernetes.io/part-of: cert-manager
            spec:
              replicas: 1
              selector:
                matchLabels:
                  app.kubernetes.io/name: cert-manager-openshift-routes
                  app.kubernetes.io/version: "0.5.0"
                  app.kubernetes.io/component: controller
                  app.kubernetes.io/part-of: cert-manager
              template:
                metadata:
                  labels:
                    app.kubernetes.io/name: cert-manager-openshift-routes
                    app.kubernetes.io/version: "0.5.0"
                    app.kubernetes.io/component: controller
                    app.kubernetes.io/part-of: cert-manager
                spec:
                  serviceAccountName: cert-manager-openshift-routes
                  automountServiceAccountToken: true
                  containers:
                    - name: cert-manager-openshift-routes
                      image: "ghcr.io/cert-manager/cert-manager-openshift-routes:0.5.0"
                      args:
                      - -v=5
                      - '--leader-election-namespace=ibm-cert-manager'
                      ports:
                      - containerPort: 6060
                        name: readiness
                        protocol: TCP
                      - containerPort: 9402
                        name: metrics
                        protocol: TCP
                      readinessProbe:
                        httpGet:
                          port: readiness
                          path: "/readyz"
                        initialDelaySeconds: 3
                        periodSeconds: 5
                        timeoutSeconds: 3
            EOF
            echo "Create clusterIssuer"
            oc apply -f - <<EOF 
            apiVersion: cert-manager.io/v1
            kind: ClusterIssuer
            metadata:
              annotations:
              name: letsencrypt
            spec:
              acme:
                email: dataproductsolution@ibm.com
                preferredChain: ""
                privateKeySecretRef:
                  name: letsencrypt
                server: https://acme-v02.api.letsencrypt.org/directory
                solvers:
                  - http01:
                      ingress: {}
            EOF
      taskRef:
        kind: Task
        name: ibm-pak
      runAfter:
        - deploy-stepzen
    - name: setup-stepzen-routes
      params:
        - name: SCRIPT
          value: |-
            echo "Get cluster domain"
            cluster_domain=$(oc get ingresses.config/cluster -o jsonpath={.spec.domain})
            echo "Cluster domain is: $cluster_domain"
            # apps.66b204f49a14d0001e972cdd.ocp.techzone.ibm.com

            echo "Create stepzen-to-graph-server route"
            oc apply -f - <<EOF 
            apiVersion: route.openshift.io/v1
            kind: Route
            metadata:
              annotations:
                cert-manager.io/issuer-kind: ClusterIssuer
                cert-manager.io/issuer-name: letsencrypt
                haproxy.router.openshift.io/balance: random
                haproxy.router.openshift.io/disable_cookies: "true"
                haproxy.router.openshift.io/hsts_header: max-age=31536000;includeSubDomains;preload
                haproxy.router.openshift.io/timeout: 30s
                haproxy.router.openshift.io/timeout-tunnel: 5d
              name: stepzen-to-graph-server
              namespace: stepzen
            spec:
              host: stepzen.zen.$cluster_domain
              port:
                targetPort: stepzen-graph-server
              tls:
                haproxy.router.openshift.io/hsts_header: max-age=31536000;includeSubDomains;preload
                insecureEdgeTerminationPolicy: None
                termination: edge
              to:
                kind: Service
                name: stepzen-graph-server
                weight: 200
              wildcardPolicy: None
            EOF

            echo "Create graphql-to-graph-server route"
            oc apply -f - <<EOF 
            apiVersion: route.openshift.io/v1
            kind: Route
            metadata:
              annotations:
                cert-manager.io/issuer-kind: ClusterIssuer
                cert-manager.io/issuer-name: letsencrypt
                haproxy.router.openshift.io/balance: random
                haproxy.router.openshift.io/disable_cookies: "true"
                haproxy.router.openshift.io/hsts_header: max-age=31536000;includeSubDomains;preload
                haproxy.router.openshift.io/timeout: 30s
                haproxy.router.openshift.io/timeout-tunnel: 5d
              name: graphql-to-graph-server
              namespace: stepzen
            spec:
              host: graphql.zen.$cluster_domain
              path: /
              port:
                targetPort: stepzen-graph-server
              tls:
                insecureEdgeTerminationPolicy: None
                termination: edge
              to:
                kind: Service
                name: stepzen-graph-server
                weight: 150
              wildcardPolicy: None
            EOF

            echo "Create graphql-to-graph-server-subscriptions route"
            oc apply -f - <<EOF 
            apiVersion: route.openshift.io/v1
            kind: Route
            metadata:
              annotations:
                cert-manager.io/issuer-kind: ClusterIssuer
                cert-manager.io/issuer-name: letsencrypt
                haproxy.router.openshift.io/balance: random
                haproxy.router.openshift.io/disable_cookies: "true"
                haproxy.router.openshift.io/hsts_header: max-age=31536000;includeSubDomains;preload
                haproxy.router.openshift.io/timeout: 30s
                haproxy.router.openshift.io/timeout-tunnel: 5d
              name: graphql-to-graph-server-subscriptions
              namespace: stepzen
            spec:
              host: graphql.zen.$cluster_domain
              path: /stepzen-subscriptions/
              port:
                targetPort: stepzen-graph-server-subscription
              tls:
                insecureEdgeTerminationPolicy: None
                termination: edge
              to:
                kind: Service
                name: stepzen-graph-server-subscription
                weight: 150
              wildcardPolicy: None
            EOF
      taskRef:
        kind: Task
        name: ibm-pak
      runAfter:
        - install-openshift-routes        
      workspaces:
        - name: manifest-dir
          workspace: workspace
    - name: get-stepzen-account
      params:
        - name: SCRIPT
          value: |-
            ls -la

            cd ibm-stepzen-case/inventory/stepzenGraphOperator/files/deploy
            ls -la 
            oc project stepzen

            echo "Patch stepzen-admin.sh file"
            echo "original file"
            echo "======================"
            cat stepzen-admin.sh | grep openssl
            sed -i '/openssl rand/c\random_string=$(tr -dc a-z0-9 </dev/urandom | head -c 6; echo)' stepzen-admin.sh

            echo "patched file"
            echo "======================"
            cat stepzen-admin.sh | grep urandom
            
            echo "get admin key"
            ./stepzen-admin.sh get-adminkey > adminkey.log
            cat adminkey.log
            admin_key=$(cat adminkey.log| grep graphql)
            echo "get api key"
            ./stepzen-admin.sh get-apikey > apikey.log
            cat apikey.log
            api_key=$(cat apikey.log | grep graphql)

            cluster_domain=$(oc get ingresses.config/cluster -o jsonpath={.spec.domain})
            echo "Cluster domain is: $cluster_domain"

            echo "Admin key is: $admin_key"
            echo "Api key is: $api_key"
            echo "Route for graphql account is: graphql.zen.$cluster_domain"

            echo "create secret"
            #TODO check if secret exists
            oc delete secret -n stepzen stepzen-keys
            oc create secret -n stepzen generic stepzen-keys --from-literal admin_key="$admin_key" --from-literal api_key="$api_key" --from-literal route="graphql.zen.$cluster_domain"
      taskRef:
        kind: Task
        name: ibm-pak
      runAfter:
        - setup-stepzen-routes          
      workspaces:
        - name: manifest-dir
          workspace: workspace   
    ####### APIC ACME config
    - name: configure-acme-org
      params:
        - name: SCRIPT
          value: |-
            echo "wait for the apicluster instance"

            i=0
            while true
            do
              status=$(oc get -n $(params.cp4i-namespace) apiconnectcluster -o yaml | yq '.items[0].status.conditions.[] | select(.type == "Ready") | contains({"status": "'True'"})')
              echo "Current status: $status"
              # Check to see if the deployment exists and apply patch if it does
              if [ -z "$status" ] || [ $status != "true" ] ; then
                echo "[$((120 -$i))] Still waiting for apiconnectcluster to be ready"
              else
                echo "apiconnectcluster ready"
                break
              fi

              ((i++))
              sleep 60
              if [[ "$i" == '120' ]]; then
                echo " apiconnectcluster not created within timeout limit"
                exit 1
              fi
            done 

            echo "wait for the portalcluster instance"
            i=0
            while true
            do
              status=$(oc get -n $(params.cp4i-namespace) portalcluster -o yaml | yq '.items[0].status.conditions.[] | select(.type == "Ready") | contains({"status": "'True'"})')
              echo "Current status: $status"
              # Check to see if the deployment exists and apply patch if it does
              if [ -z "$status" ] || [ $status != "true" ] ; then
                echo "[$((120 -$i))] Still waiting for portalcluster to be ready"
              else
                echo "portalcluster ready"
                break
              fi

              ((i++))
              sleep 60
              if [[ "$i" == '120' ]]; then
                echo " portalcluster not created within timeout limit"
                exit 1
              fi
            done 

            ### PATCH billing if yaml in install doesnt work
            # oc patch -n integration managementcluster/api-management-mgmt --type merge -p '{"spec":{"billing":{"enabled":true}}}'

            echo "setup variables"

            ###################
            # setup vars      #
            ###################

            echo "Get APIC_ENDPOINT"
            export APIC_ENDPOINT=$(oc get route -l app.kubernetes.io/name=platform-api-endpoint -n integration -o jsonpath="{.items[].spec.host}")
            echo "Get client secret"
            export APIC_SECRET=$(oc get  -n integration managementcluster api-management-mgmt -o jsonpath="{.status.toolkitCredentialSecret}")
            export APIC_CLIENT_ID=$(oc extract --namespace integration secret/$APIC_SECRET --keys=credential.json --to=- | jq -r .id)
            export APIC_CLIENT_SECRET=$(oc extract --namespace integration secret/$APIC_SECRET --keys=credential.json --to=- | jq -r .secret)

            export APIC_ADMIN_REALM="admin/default-idp-1"
            export APIC_PROVIDER_REALM="provider/openldap"
            export APIC_ADMIN_ORG="admin"
            export APIC_ADMIN_USER=admin

            export APIC_PWD=$(oc get secret "api-management-mgmt-admin-pass" -n integration -o jsonpath="{.data.password}"| base64 -d)

            export APIC_MAIL_SERVER="apic-mail"
            export MAIL_SERVER_HOST="mailserver.development-mailserver"
            export MAIL_SERVER_PORT=1025

            export BUILD_DIR=rest-build
            ##### Provider Org
            export CUSTOMER_NAME=acme
            export PORG_DEV_TITLE="ACME"
            export PORG_DEV_NAME=$(echo ${PORG_DEV_TITLE// /-} | awk '{print tolower($0)}')

            export PORG_DEV_OWNER_FN="acme"
            export PORG_DEV_OWNER_LN="admin"
            export PORG_DEV_OWNER_EMAIL="${PORG_DEV_OWNER_USER}@${CUSTOMER_NAME}.org"
            export PORG_DEV_OWNER_USER="developer-1"
            export PORG_DEV_OWNER_PWD="passw0rd"
            export CAT_DEV_TITLE="Marketplace"
            export CAT_DEV_NAME=$(echo ${CAT_DEV_TITLE// /-} | awk '{print tolower($0)}')
            export APIC_PROVIDER_REALM="provider/openldap"

            export CORG_DEV_TITLE="Consumer Org"
            export CORG_DEV_NAME=$(echo ${CORG_DEV_TITLE// /-} | awk '{print tolower($0)}')

            export CORG_DEV_OWNER_FN="consumer"
            export CORG_DEV_OWNER_LN="${CUSTOMER_NAME}"
            export CORG_DEV_OWNER_USER="consumer-1"
            export CORG_DEV_OWNER_PWD="passw0rd"
            export CORG_DEV_OWNER_EMAIL="${CORG_DEV_OWNER_USER}@${CUSTOMER_NAME}.org"

            export BEARER_TOKEN=$(curl -k -X POST https://$APIC_ENDPOINT/api/token \
            -H 'Content-Type: application/json' \
            -d "{\"username\": \"$APIC_ADMIN_USER\",
            \"password\": \"$APIC_PWD\",
            \"realm\": \"$APIC_ADMIN_REALM\", 
            \"client_id\": \"$APIC_CLIENT_ID\",
            \"client_secret\": \"$APIC_CLIENT_SECRET\",
            \"grant_type\": \"password\"}"  | jq -r .access_token)


            ######################################################
            # Add New Mail Server Definition and Send Test Email #
            ######################################################
            mkdir ${BUILD_DIR}

            curl -k --request POST \
              --url https://$APIC_ENDPOINT/api/orgs/$APIC_ADMIN_ORG/mail-servers \
              --header "Authorization: Bearer $BEARER_TOKEN" \
              --header 'accept: application/json' \
              --header 'content-type: application/json' \
              --data '{
              "type": "mail_server",
              "title": "apic-mail",
              "host": "mailserver.development-mailserver",
              "port": 1025
            }' > ${BUILD_DIR}/${APIC_MAIL_SERVER}-create-output.json

            #################################################
            # Update Cloud Settings to use new Email Server #
            #################################################
            echo "Get current cloud settings and store in cloud-settings-original.json file..."
            #apic cloud-settings:get -s $APIC_MGMT_SERVER --format json --fields mail_server_url --output - > cloud-setting-ms-original.json


            curl -k --request GET \
              --url https://$APIC_ENDPOINT/api/cloud/settings \
              --header "Authorization: Bearer $BEARER_TOKEN" \
              --header 'accept: application/json' > ${BUILD_DIR}/cloud-settings-output.json

            echo "  Get the URL for the new mail server..."
            MAIL_SERVER_URL=$(cat  ${BUILD_DIR}/${APIC_MAIL_SERVER}-create-output.json | jq -r '.url')
            echo "  New Mail Server URL - $MAIL_SERVER_URL" 

            echo "  Update New Mail Server URL and save in cloud-settings-ms-updated.json file"
            jq --arg MAIL_SERVER_URL "$MAIL_SERVER_URL" \
              '.mail_server_url=$MAIL_SERVER_URL | .email_sender.name="APIC Administrator" | .email_sender.address="admin@apiconnect.net" '\
              ${BUILD_DIR}/cloud-settings-output.json > ${BUILD_DIR}/cloud-setting-ms-updated.json

            echo "  Add the New Mail Server to the cloud settings in APIC"
            curl -k --request PUT \
              --url https://$APIC_ENDPOINT/api/cloud/settings \
              --header "Authorization: Bearer $BEARER_TOKEN" \
              --header 'accept: application/json' \
              --header 'content-type: application/json' \
              --data "@${BUILD_DIR}/cloud-setting-ms-updated.json"

            #################################################
            # Create LDAP Registry                          #
            #################################################
            # get ldap url
            export LDAP_INT_URL=$(curl -k --request GET \
              --url https://$APIC_ENDPOINT/api/cloud/integrations/user-registry \
              --header "Authorization: Bearer $BEARER_TOKEN" \
              --header 'accept: application/json' | jq -r '.results[] | select(.name == "ldap") | .url')

            echo "LDAP_INT_URL: $LDAP_INT_URL" 

            cat > ${BUILD_DIR}/openldap-template.json <<EOF
            {
                "name": "openldap",
                "title": "openldap",
                "integration_url": "int-url",
                "user_managed": false,
                "user_registry_managed": false,
                "external_group_mapping_enabled": false,
                "case_sensitive": false,
                "email_required": true,
                "email_unique_if_exist": true,
                "identity_providers": [
                    {
                        "name": "openldap",
                        "title": "openldap"
                    }
                ],
                "configuration": {
                    "admin_dn": "cn=admin,dc=acme,dc=org",
                    "admin_password": "adminpassword",
                    "search_dn_base": "dc=acme,dc=org",
                    "search_dn_scope": "sub",
                    "authenticated_bind": "true",
                    "authentication_method": "search_dn",
                    "search_dn_filter_prefix": "(uid=",
                    "search_dn_filter_suffix": ")"
                },
                "endpoint": {
                    "endpoint": "ldap://openldap.openldap:389"
                }
            }
            EOF
            export LDAP_PASSWD=$(oc extract --namespace openldap secret/openldap --keys=adminpassword --to=-)

            echo "Set url and passwd"

            jq --arg LDAP_INT_URL "$LDAP_INT_URL" --arg LDAP_PASSWD "$LDAP_PASSWD" '.integration_url=$LDAP_INT_URL | .configuration.admin_password=$LDAP_PASSWD' ${BUILD_DIR}/openldap-template.json > "${BUILD_DIR}/openldap-output.json"

            echo "Creating openldap in APIC using generated ${BUILD_DIR}/openldap-output.json file..."

            curl -k --request POST \
              --url https://$APIC_ENDPOINT/api/orgs/$APIC_ADMIN_ORG/user-registries \
              --header "Authorization: Bearer $BEARER_TOKEN" \
              --header 'accept: application/json' \
              --header 'content-type: application/json' \
              --data "@${BUILD_DIR}/openldap-output.json" > ${BUILD_DIR}/openldap-create-output.json


            echo "  Get the URL for the openldap "
            export OPEN_LDAP_URL=$(cat ${BUILD_DIR}/openldap-create-output.json | jq -r '.url')
            echo "  OPEN_LDAP_URL URL - $OPEN_LDAP_URL"

            echo "Get current providers"

            # apic user-registry-settings:get --server $APIC_MGMT_SERVER --format json --output - > ${BUILD_DIR}/providers-output.json
            curl -k --request GET \
              --url https://$APIC_ENDPOINT/api/cloud/settings/user-registries \
              --header "Authorization: Bearer $BEARER_TOKEN" \
              --header 'accept: application/json' > ${BUILD_DIR}/providers-output.json

            jq --arg OPEN_LDAP_URL "$OPEN_LDAP_URL" '.provider_user_registry_urls+=[$OPEN_LDAP_URL]' ${BUILD_DIR}/providers-output.json > "${BUILD_DIR}/providers-output2.json"

            #apic user-registry-settings:update --server $APIC_MGMT_SERVER --output - ${BUILD_DIR}/providers-output2.json
            curl -k --request PUT  \
              --url https://$APIC_ENDPOINT/api/cloud/settings/user-registries \
              --header "Authorization: Bearer $BEARER_TOKEN" \
              --header 'accept: application/json' \
              --header 'content-type: application/json' \
              --data "@${BUILD_DIR}/providers-output2.json" > ${BUILD_DIR}/providers-update-output.json


            ###########################
            # Create Development pOrg #
            ###########################

            echo " Get user $PORG_DEV_OWNER_USER in APIC using generated ${BUILD_DIR}/${PORG_DEV_OWNER_USER}.json file..."
            #apic users:get --server $APIC_MGMT_SERVER --org $APIC_ADMIN_ORG --user-registry openldap --format json --output - developer-1 > ${BUILD_DIR}/${PORG_DEV_OWNER_USER}-create-output.json
            ## TODO Test if exists
            curl -k --request POST \
              --url "https://$APIC_ENDPOINT/api/user-registries/$APIC_ADMIN_ORG/openldap/users" \
              --header "Authorization: Bearer $BEARER_TOKEN" \
              --header 'accept: application/json' \
              --header 'content-type: application/json' \
              --data '{"username":"developer-1", "email":"developer-1@acme.org"}' > ${BUILD_DIR}/${PORG_DEV_OWNER_USER}-create-output.json


            echo "  Get the URL for the user"
            PORG_DEV_OWNER_USER_URL=$(cat ${BUILD_DIR}/${PORG_DEV_OWNER_USER}-create-output.json | jq -r '.url')
            echo "  New User URL - $PORG_DEV_OWNER_USER_URL"

            echo " "
            echo "Build Dev pOrg file and store in ${BUILD_DIR}/${PORG_DEV_NAME}.json file..."
            jq -n \
              --arg PORG_DEV_TITLE "$PORG_DEV_TITLE" \
              --arg PORG_DEV_NAME "$PORG_DEV_NAME" \
              --arg PORG_DEV_OWNER_USER_URL "$PORG_DEV_OWNER_USER_URL" \
              '.title=$PORG_DEV_TITLE | .name=$PORG_DEV_NAME | .owner_url=$PORG_DEV_OWNER_USER_URL' \
              > "${BUILD_DIR}/${PORG_DEV_NAME}.json"

            echo " "
            echo "Creating the pOrg ($PORG_DEV_TITLE) in APIC using generated ${BUILD_DIR}/${PORG_DEV_NAME}.json file..."
            #apic orgs:create --server $APIC_MGMT_SERVER --format json ${BUILD_DIR}/${PORG_DEV_NAME}.json > ${BUILD_DIR}/${PORG_DEV_NAME}-create-output.json

            curl -k --request POST \
              --url https://$APIC_ENDPOINT/api/cloud/orgs \
              --header "Authorization: Bearer $BEARER_TOKEN" \
              --header 'accept: application/json' \
              --header 'content-type: application/json' \
              --data "@${BUILD_DIR}/${PORG_DEV_NAME}.json" 


            #############################
            # Create & Config Catalog   #
            #############################

            echo "Login to POrg"

            export ORG_TOKEN=$(curl -k -X POST https://$APIC_ENDPOINT/api/token \
            -H 'Content-Type: application/json' \
            -d "{\"username\": \"$PORG_DEV_OWNER_USER\",
            \"password\": \"$PORG_DEV_OWNER_PWD\",
            \"realm\": \"$APIC_PROVIDER_REALM\", 
            \"client_id\": \"$APIC_CLIENT_ID\",
            \"client_secret\": \"$APIC_CLIENT_SECRET\",
            \"grant_type\": \"password\"}"  | jq -r .access_token)

            echo "Create $CAT_DEV_NAME Catalog in Dev pOrg..."
            echo "  Build create Catalog file - ${BUILD_DIR}/${CAT_DEV_NAME}-dev-create.json"
            jq -n \
              --arg CAT_DEV_TITLE "$CAT_DEV_TITLE" \
              --arg CAT_DEV_NAME "$CAT_DEV_NAME" \
              '.title=$CAT_DEV_TITLE | .name=$CAT_DEV_NAME' \
              > ${BUILD_DIR}/${CAT_DEV_NAME}-dev-create.json


            echo "  Create Catalog by applying the ${BUILD_DIR}/${CAT_DEV_NAME}-dev-create.json file storing result in ${BUILD_DIR}/${CAT_DEV_NAME}-dev-create-output.json"
            #apic catalogs:create --server $APIC_MGMT_SERVER --org $PORG_DEV_NAME --format json ${BUILD_DIR}/${CAT_DEV_NAME}-dev-create.json > ${BUILD_DIR}/${CAT_DEV_NAME}-dev-create-output.json

            curl -k --request POST \
              --url https://$APIC_ENDPOINT/api/orgs/$PORG_DEV_NAME/catalogs \
              --header "Authorization: Bearer $ORG_TOKEN" \
              --header 'accept: application/json' \
              --header 'content-type: application/json' \
              --data "@${BUILD_DIR}/${CAT_DEV_NAME}-dev-create.json" > ${BUILD_DIR}/${CAT_DEV_NAME}-dev-create-output.json


              #####
            # TODO change user registry, add api registry, product visibility

            echo "  Looking up the URL for the portal-service"
            #CAT_DEV_PORTAL_SERVICE_URL=$(apic portal-services:list --server $APIC_MGMT_SERVER --scope org --org $PORG_DEV_NAME --format json | jq -r '.results[].url')

            CAT_DEV_PORTAL_SERVICE_URL=$(curl -k --request GET \
              --url "https://$APIC_ENDPOINT/api/orgs/$PORG_DEV_NAME/portal-services" \
              --header "Authorization: Bearer $ORG_TOKEN" \
              --header 'accept: application/json' | jq -r '.results[].url')

            echo "  portal-service url - $CAT_DEV_PORTAL_SERVICE_URL"

            echo "Setup Openldap as UR for catalog"
            CAT_OPEN_LDAP_URL=$(curl -k --request POST \
              --url https://$APIC_ENDPOINT/api/catalogs/$PORG_DEV_NAME/$CAT_DEV_NAME/configured-catalog-user-registries \
              --header "Authorization: Bearer $ORG_TOKEN" \
              --header 'accept: application/json' \
              --header 'content-type: application/json' \
              --data  "{\"user_registry_url\": \"$OPEN_LDAP_URL\"}" | jq -r '.url')
            echo "CAT_OPEN_LDAP_URL - $CAT_OPEN_LDAP_URL"

            echo "Setup Openldap as UR for catalog APIs"
            CAT_API_LDAP_URL=$(curl -k --request POST \
              --url https://$APIC_ENDPOINT/api/catalogs/$PORG_DEV_NAME/$CAT_DEV_NAME/configured-api-user-registries \
              --header "Authorization: Bearer $ORG_TOKEN" \
              --header 'accept: application/json' \
              --header 'content-type: application/json' \
              --data  "{\"user_registry_url\": \"$OPEN_LDAP_URL\"}" | jq -r '.url')
            echo "CAT_API_LDAP_URL - $CAT_API_LDAP_URL"

            echo "Get catalog settings"
            curl -k --request GET \
              --url "https://$APIC_ENDPOINT/api/catalogs/$PORG_DEV_NAME/$CAT_DEV_NAME/settings" \
              --header "Authorization: Bearer $ORG_TOKEN" \
              --header 'accept: application/json' > ${BUILD_DIR}/${CAT_DEV_NAME}-settings.json

            echo "Update portal settings"

            echo "  Build the catalog setting update for the ${CAT_DEV_TITLE} catalog in the Dev pOrg to add the Portal and Approval Settings"
            echo "  Catalog setting update file stored in ${BUILD_DIR}/${CAT_DEV_NAME}-dev-catalog-settings-update.json"
            jq -n \
            --arg CAT_DEV_PORTAL_SERVICE_URL "$CAT_DEV_PORTAL_SERVICE_URL" \
              '.portal.portal_service_url=$CAT_DEV_PORTAL_SERVICE_URL | .portal.type="drupal" ' \
              > ${BUILD_DIR}/${CAT_DEV_NAME}-dev-catalog-settings-update.json

            curl -k --request PUT \
              --url https://$APIC_ENDPOINT/api/catalogs/$PORG_DEV_NAME/$CAT_DEV_NAME/settings \
              --header "Authorization: Bearer $ORG_TOKEN" \
              --header 'accept: application/json' \
              --header 'content-type: application/json' \
              --data "@${BUILD_DIR}/${CAT_DEV_NAME}-dev-catalog-settings-update.json"


            ######################################
            # Create Owner for Dev Consumer cOrg #
            ######################################

            echo "  Creating the cOrg owner ($CORG_DEV_OWNER_USER) in APIC"
            #apic users:create --server $APIC_MGMT_SERVER --org $PORG_DEV_NAME --user-registry openldap --format json ${BUILD_DIR}/${CORG_DEV_NAME}-owner.json > ${BUILD_DIR}/${CORG_DEV_NAME}-owner-create-output.json

            curl -k --request POST \
              --url "https://$APIC_ENDPOINT/api/user-registries/$PORG_DEV_NAME/openldap/users" \
              --header "Authorization: Bearer $ORG_TOKEN" \
              --header 'accept: application/json' \
              --header 'content-type: application/json' \
              --data "{\"username\":\"$CORG_DEV_OWNER_USER\", \"email\":\"$CORG_DEV_OWNER_EMAIL\"}" > ${BUILD_DIR}/${CORG_DEV_OWNER_USER}-create-output.json


            echo "  Get the URL for the Owner user"
            CORG_DEV_OWNER_USER_URL=$(cat ${BUILD_DIR}/${CORG_DEV_OWNER_USER}-create-output.json | jq -r '.url')
            echo "  Owner User URL - $CORG_DEV_OWNER_USER_URL"

            echo " "
            echo "Build Dev cOrg file and store in ${BUILD_DIR}/${CORG_DEV_NAME}.json file..."
            jq -n \
              --arg CORG_DEV_TITLE "$CORG_DEV_TITLE" \
              --arg CORG_DEV_NAME "$CORG_DEV_NAME" \
              --arg CORG_DEV_OWNER_USER_URL "$CORG_DEV_OWNER_USER_URL" \
              '.title=$CORG_DEV_TITLE | .name=$CORG_DEV_NAME | .owner_url=$CORG_DEV_OWNER_USER_URL' \
              > "${BUILD_DIR}/${CORG_DEV_NAME}.json"

            echo " "
            echo "Creating the cOrg ($CORG_DEV_TITLE) in APIC using generated ${BUILD_DIR}/${CORG_DEV_NAME}.json file..."
            #apic consumer-orgs:create --server $APIC_MGMT_SERVER --org $PORG_DEV_NAME --catalog ${CAT_DEV_NAME} --format json ${BUILD_DIR}/${CORG_DEV_NAME}.json > ${BUILD_DIR}/${CORG_DEV_NAME}-create-output.json

            curl -k --request POST \
              --url https://$APIC_ENDPOINT/api/catalogs/$PORG_DEV_NAME/$CAT_DEV_NAME/consumer-orgs \
              --header "Authorization: Bearer $ORG_TOKEN" \
              --header 'accept: application/json' \
              --header 'content-type: application/json' \
              --data "@${BUILD_DIR}/${CORG_DEV_NAME}.json"  


            echo "Creating the cOrg ($CORG_DEV_TITLE) in APIC using generated ${BUILD_DIR}/${CORG_DEV_NAME}.json file..."
            data_app_response=$(curl -k --request POST \
              --url "https://$APIC_ENDPOINT/api/consumer-orgs/$PORG_DEV_NAME/$CAT_DEV_NAME/$CORG_DEV_NAME/apps" \
              --header 'Accept: application/json' \
              --header 'Content-Type: application/json' \
              --header "Authorization: Bearer $ORG_TOKEN" \
              --data-raw '{
              "title": "Data_Consumer_App",
              "name": "data_consumer_app"
            }')

            echo $data_app_response
            client_id=$(echo $data_app_response | jq -r .client_id)
            client_secret=$(echo $data_app_response | jq -r .client_secret)

            echo "create data_app secret"
            #TODO check if secret exists
            oc delete secret -n integration data-app-keys
            oc create secret -n integration generic data-app-keys --from-literal client_id="$client_id" --from-literal client_secret="$client_secret" 


      taskRef:
        kind: Task
        name: ibm-pak
      runAfter:
        - create-api-connect          
      workspaces:
        - name: manifest-dir
          workspace: workspace        

  workspaces:
    - name: workspace


